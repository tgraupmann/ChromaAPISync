#pragma region autogenerated
/*
	Return the sum of colors
*/
int AddColor(
	const int color1, const int color2);
/*
	Adds a frame to the `Chroma` animation and sets the `duration` (in seconds). 
	The `color` is expected to be an array of the dimensions for the `deviceType/device`. 
	The `length` parameter is the size of the `color` array. For `EChromaSDKDevice1DEnum` 
	the array size should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array 
	size should be `MAX ROW` times `MAX COLUMN`. Returns the animation id upon 
	success. Returns negative one upon failure.
*/
int AddFrame(
	int animationId, float duration, int* colors, int length);
/*
	Add source color to target where color is not black for frame id, reference 
	source and target by id.
*/
void AddNonZeroAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Add source color to target where color is not black for all frames, reference 
	source and target by id.
*/
void AddNonZeroAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Add source color to target where color is not black for all frames, reference 
	source and target by name.
*/
void AddNonZeroAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double AddNonZeroAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Add source color to target where color is not black for all frames starting 
	at offset for the length of the source, reference source and target by 
	id.
*/
void AddNonZeroAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Add source color to target where color is not black for all frames starting 
	at offset for the length of the source, reference source and target by 
	name.
*/
void AddNonZeroAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double AddNonZeroAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Add source color to target where color is not black for frame id, reference 
	source and target by name.
*/
void AddNonZeroAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	Add source color to target where color is not black for the source frame 
	and target offset frame, reference source and target by id.
*/
void AddNonZeroAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Add source color to target where color is not black for the source frame 
	and target offset frame, reference source and target by name.
*/
void AddNonZeroAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double AddNonZeroAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Add source color to target where the target color is not black for all frames, 
	reference source and target by id.
*/
void AddNonZeroTargetAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Add source color to target where the target color is not black for all frames, 
	reference source and target by name.
*/
void AddNonZeroTargetAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double AddNonZeroTargetAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Add source color to target where the target color is not black for all frames 
	starting at offset for the length of the source, reference source and target 
	by id.
*/
void AddNonZeroTargetAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Add source color to target where the target color is not black for all frames 
	starting at offset for the length of the source, reference source and target 
	by name.
*/
void AddNonZeroTargetAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double AddNonZeroTargetAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Add source color to target where target color is not blank from the source 
	frame to the target offset frame, reference source and target by id.
*/
void AddNonZeroTargetAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Add source color to target where target color is not blank from the source 
	frame to the target offset frame, reference source and target by name.
*/
void AddNonZeroTargetAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double AddNonZeroTargetAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Append all source frames to the target animation, reference source and target 
	by id.
*/
void AppendAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Append all source frames to the target animation, reference source and target 
	by name.
*/
void AppendAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double AppendAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	`PluginClearAll` will issue a `CLEAR` effect for all devices.
*/
void ClearAll();
/*
	`PluginClearAnimationType` will issue a `CLEAR` effect for the given device.
*/
void ClearAnimationType(
	int deviceType, int device);
/*
	`PluginCloseAll` closes all open animations so they can be reloaded from 
	disk. The set of animations will be stopped if playing.
*/
void CloseAll();
/*
	Closes the `Chroma` animation to free up resources referenced by id. Returns 
	the animation id upon success. Returns negative one upon failure. This 
	might be used while authoring effects if there was a change necessitating 
	re-opening the animation. The animation id can no longer be used once closed.
*/
int CloseAnimation(int animationId);
/*
	D suffix for limited data types.
*/
double CloseAnimationD(double animationId);
/*
	Closes the `Chroma` animation referenced by name so that the animation can 
	be reloaded from disk.
*/
void CloseAnimationName(String path);
/*
	D suffix for limited data types.
*/
double CloseAnimationNameD(String path);
/*
	`PluginCloseComposite` closes a set of animations so they can be reloaded 
	from disk. The set of animations will be stopped if playing.
*/
void CloseComposite(String name);
/*
	D suffix for limited data types.
*/
double CloseCompositeD(String name);
/*
	Copy source animation to target animation for the given frame. Source and 
	target are referenced by id.
*/
void CopyAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Copy source animation to target animation for the given frame. Source and 
	target are referenced by id.
*/
void CopyAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	Copy animation to named target animation in memory. If target animation 
	exists, close first. Source is referenced by id.
*/
int CopyAnimation(
	int sourceAnimationId, String targetAnimation);
/*
	Copy animation to named target animation in memory. If target animation 
	exists, close first. Source is referenced by name.
*/
void CopyAnimationName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyAnimationNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0 
	to 1.0. Reference the animation by id.
*/
void CopyBlueChannelAllFrames(
	int animationId, float redIntensity, float greenIntensity);
/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0 
	to 1.0. Reference the animation by name.
*/
void CopyBlueChannelAllFramesName(
	String path, float redIntensity, float greenIntensity);
/*
	D suffix for limited data types.
*/
double CopyBlueChannelAllFramesNameD(
	String path, double redIntensity, double greenIntensity);
/*
	Copy green channel to other channels for all frames. Intensity range is 
	0.0 to 1.0. Reference the animation by id.
*/
void CopyGreenChannelAllFrames(
	int animationId, float redIntensity, float blueIntensity);
/*
	Copy green channel to other channels for all frames. Intensity range is 
	0.0 to 1.0. Reference the animation by name.
*/
void CopyGreenChannelAllFramesName(
	String path, float redIntensity, float blueIntensity);
/*
	D suffix for limited data types.
*/
double CopyGreenChannelAllFramesNameD(
	String path, double redIntensity, double blueIntensity);
/*
	Copy animation key color from the source animation to the target animation 
	for the given frame. Reference the source and target by id.
*/
void CopyKeyColor(
	int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
/*
	Copy animation key color from the source animation to the target animation 
	for all frames. Reference the source and target by id.
*/
void CopyKeyColorAllFrames(
	int sourceAnimationId, int targetAnimationId, int rzkey);
/*
	Copy animation key color from the source animation to the target animation 
	for all frames. Reference the source and target by name.
*/
void CopyKeyColorAllFramesName(
	String sourceAnimation, String targetAnimation, int rzkey);
/*
	D suffix for limited data types.
*/
double CopyKeyColorAllFramesNameD(
	String sourceAnimation, String targetAnimation, double rzkey);
/*
	Copy animation key color from the source animation to the target animation 
	for all frames, starting at the offset for the length of the source animation. 
	Source and target are referenced by id.
*/
void CopyKeyColorAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int rzkey, int offset);
/*
	Copy animation key color from the source animation to the target animation 
	for all frames, starting at the offset for the length of the source animation. 
	Source and target are referenced by name.
*/
void CopyKeyColorAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int rzkey, int offset);
/*
	D suffix for limited data types.
*/
double CopyKeyColorAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double rzkey, double offset);
/*
	Copy animation key color from the source animation to the target animation 
	for the given frame.
*/
void CopyKeyColorName(
	String sourceAnimation, String targetAnimation, int frameId, int rzkey);
/*
	D suffix for limited data types.
*/
double CopyKeyColorNameD(
	String sourceAnimation, String targetAnimation, double frameId, double rzkey);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation for the given frame. Reference the source and target by 
	id.
*/
void CopyKeysColor(
	int sourceAnimationId, int targetAnimationId, int frameId, Array keys, int size);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation for all frames. Reference the source and target by id.
*/
void CopyKeysColorAllFrames(
	int sourceAnimationId, int targetAnimationId, Array keys, int size);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation for all frames. Reference the source and target by name.
*/
void CopyKeysColorAllFramesName(
	String sourceAnimation, String targetAnimation, Array keys, int size);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation for the given frame. Reference the source and target by 
	name.
*/
void CopyKeysColorName(
	String sourceAnimation, String targetAnimation, int frameId, Array keys, int size);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation from the source frame to the target frame. Reference the 
	source and target by id.
*/
void CopyKeysColorOffset(
	int sourceAnimationId, int targetAnimationId, int sourceFrameId, int targetFrameId, Array keys, int size);
/*
	Copy animation color for a set of keys from the source animation to the 
	target animation from the source frame to the target frame. Reference the 
	source and target by name.
*/
void CopyKeysColorOffsetName(
	String sourceAnimation, String targetAnimation, int sourceFrameId, int targetFrameId, Array keys, int size);
/*
	Copy source animation to target animation for the given frame. Source and 
	target are referenced by id.
*/
void CopyNonZeroAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Copy nonzero colors from a source animation to a target animation for all 
	frames. Reference source and target by id.
*/
void CopyNonZeroAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Copy nonzero colors from a source animation to a target animation for all 
	frames. Reference source and target by name.
*/
void CopyNonZeroAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyNonZeroAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy nonzero colors from a source animation to a target animation for all 
	frames starting at the offset for the length of the source animation. The 
	source and target are referenced by id.
*/
void CopyNonZeroAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Copy nonzero colors from a source animation to a target animation for all 
	frames starting at the offset for the length of the source animation. The 
	source and target are referenced by name.
*/
void CopyNonZeroAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double CopyNonZeroAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Copy nonzero colors from source animation to target animation for the specified 
	frame. Source and target are referenced by id.
*/
void CopyNonZeroAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	D suffix for limited data types.
*/
double CopyNonZeroAllKeysNameD(
	String sourceAnimation, String targetAnimation, double frameId);
/*
	Copy nonzero colors from the source animation to the target animation from 
	the source frame to the target offset frame. Source and target are referenced 
	by id.
*/
void CopyNonZeroAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Copy nonzero colors from the source animation to the target animation from 
	the source frame to the target offset frame. Source and target are referenced 
	by name.
*/
void CopyNonZeroAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double CopyNonZeroAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Copy animation key color from the source animation to the target animation 
	for the given frame where color is not zero.
*/
void CopyNonZeroKeyColor(
	int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
/*
	Copy animation key color from the source animation to the target animation 
	for the given frame where color is not zero.
*/
void CopyNonZeroKeyColorName(
	String sourceAnimation, String targetAnimation, int frameId, int rzkey);
/*
	D suffix for limited data types.
*/
double CopyNonZeroKeyColorNameD(
	String sourceAnimation, String targetAnimation, double frameId, double rzkey);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for the specified frame. Source and target 
	are referenced by id.
*/
void CopyNonZeroTargetAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for all frames. Source and target are referenced 
	by id.
*/
void CopyNonZeroTargetAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for all frames. Source and target are referenced 
	by name.
*/
void CopyNonZeroTargetAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyNonZeroTargetAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for all frames. Source and target are referenced 
	by name.
*/
void CopyNonZeroTargetAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for all frames starting at the target offset 
	for the length of the source animation. Source and target animations are 
	referenced by name.
*/
void CopyNonZeroTargetAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double CopyNonZeroTargetAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for the specified frame. The source and target 
	are referenced by name.
*/
void CopyNonZeroTargetAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	D suffix for limited data types.
*/
double CopyNonZeroTargetAllKeysNameD(
	String sourceAnimation, String targetAnimation, double frameId);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for the specified source frame and target offset 
	frame. The source and target are referenced by id.
*/
void CopyNonZeroTargetAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is nonzero for the specified source frame and target offset 
	frame. The source and target are referenced by name.
*/
void CopyNonZeroTargetAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double CopyNonZeroTargetAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is zero for all frames. Source and target are referenced 
	by id.
*/
void CopyNonZeroTargetZeroAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Copy nonzero colors from the source animation to the target animation where 
	the target color is zero for all frames. Source and target are referenced 
	by name.
*/
void CopyNonZeroTargetZeroAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyNonZeroTargetZeroAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy red channel to other channels for all frames. Intensity range is 0.0 
	to 1.0. Reference the animation by id.
*/
void CopyRedChannelAllFrames(
	int animationId, float greenIntensity, float blueIntensity);
/*
	Copy green channel to other channels for all frames. Intensity range is 
	0.0 to 1.0. Reference the animation by name.
*/
void CopyRedChannelAllFramesName(
	String path, float greenIntensity, float blueIntensity);
/*
	D suffix for limited data types.
*/
double CopyRedChannelAllFramesNameD(
	String path, double greenIntensity, double blueIntensity);
/*
	Copy zero colors from source animation to target animation for the frame. 
	Source and target are referenced by id.
*/
void CopyZeroAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Copy zero colors from source animation to target animation for all frames. 
	Source and target are referenced by id.
*/
void CopyZeroAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Copy zero colors from source animation to target animation for all frames. 
	Source and target are referenced by name.
*/
void CopyZeroAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyZeroAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy zero colors from source animation to target animation for all frames 
	starting at the target offset for the length of the source animation. Source 
	and target are referenced by id.
*/
void CopyZeroAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Copy zero colors from source animation to target animation for all frames 
	starting at the target offset for the length of the source animation. Source 
	and target are referenced by name.
*/
void CopyZeroAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double CopyZeroAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Copy zero colors from source animation to target animation for the frame. 
	Source and target are referenced by name.
*/
void CopyZeroAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	Copy zero colors from source animation to target animation for the frame 
	id starting at the target offset for the length of the source animation. 
	Source and target are referenced by id.
*/
void CopyZeroAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Copy zero colors from source animation to target animation for the frame 
	id starting at the target offset for the length of the source animation. 
	Source and target are referenced by name.
*/
void CopyZeroAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	Copy zero key color from source animation to target animation for the specified 
	frame. Source and target are referenced by id.
*/
void CopyZeroKeyColor(
	int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
/*
	Copy zero key color from source animation to target animation for the specified 
	frame. Source and target are referenced by name.
*/
void CopyZeroKeyColorName(
	String sourceAnimation, String targetAnimation, int frameId, int rzkey);
/*
	D suffix for limited data types.
*/
double CopyZeroKeyColorNameD(
	String sourceAnimation, String targetAnimation, double frameId, double rzkey);
/*
	Copy nonzero color from source animation to target animation where target 
	is zero for the frame. Source and target are referenced by id.
*/
void CopyZeroTargetAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Copy nonzero color from source animation to target animation where target 
	is zero for all frames. Source and target are referenced by id.
*/
void CopyZeroTargetAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Copy nonzero color from source animation to target animation where target 
	is zero for all frames. Source and target are referenced by name.
*/
void CopyZeroTargetAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double CopyZeroTargetAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Copy nonzero color from source animation to target animation where target 
	is zero for the frame. Source and target are referenced by name.
*/
void CopyZeroTargetAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateChromaLinkEffect(
	ChromaSDK::ChromaLink::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateEffect(
	RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateHeadsetEffect(
	ChromaSDK::Headset::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateKeyboardEffect(
	ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateKeypadEffect(
	ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateMouseEffect(
	ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreCreateMousepadEffect(
	ChromaSDK::Mousepad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreDeleteEffect(RZEFFECTID EffectId);
/*
	Direct access to low level API.
*/
RZRESULT CoreInit();
/*
	Direct access to low level API.
*/
RZRESULT CoreInitSDK(
	ChromaSDK::APPINFOTYPE* AppInfo);
/*
	Direct access to low level API.
*/
RZRESULT CoreQueryDevice(
	RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE& DeviceInfo);
/*
	Direct access to low level API.
*/
RZRESULT CoreSetEffect(RZEFFECTID EffectId);
/*
	Begin broadcasting Chroma RGB data using the stored stream key as the endpoint. 
	Intended for Cloud Gaming Platforms, restore the streaming key when the 
	game instance is launched to continue streaming. streamId is a null terminated 
	string streamKey is a null terminated string StreamGetStatus() should return 
	the READY status to use this method.
*/
bool CoreStreamBroadcast(
	String streamId, String streamKey);
/*
	End broadcasting Chroma RGB data. StreamGetStatus() should return the BROADCASTING 
	status to use this method.
*/
bool CoreStreamBroadcastEnd();
/*
	shortcode: Pass the address of a preallocated character buffer to get the 
	streaming auth code. The buffer should have a minimum length of 6. length: 
	Length will return as zero if the streaming auth code could not be obtained. 
	If length is greater than zero, it will be the length of the returned streaming 
	auth code. Once you have the shortcode, it should be shown to the user 
	so they can associate the stream with their Razer ID StreamGetStatus() 
	should return the READY status before invoking this method. platform: is 
	the null terminated string that identifies the source of the stream: { 
	GEFORCE_NOW, LUNA, STADIA, GAME_PASS } title: is the null terminated string 
	that identifies the application or game.
*/
void CoreStreamGetAuthShortcode(
	char* shortcode, unsigned char* length, const wchar_t* platform, const wchar_t* title);
/*
	focus: Pass the address of a preallocated character buffer to get the stream 
	focus. The buffer should have a length of 48 length: Length will return 
	as zero if the stream focus could not be obtained. If length is greater 
	than zero, it will be the length of the returned stream focus.
*/
bool CoreStreamGetFocus(
	char* focus, unsigned char* length);
/*
	Intended for Cloud Gaming Platforms, store the stream id to persist in user 
	preferences to continue streaming if the game is suspended or closed. shortcode: 
	The shortcode is a null terminated string. Use the shortcode that authorized 
	the stream to obtain the stream id. streamId should be a preallocated buffer 
	to get the stream key. The buffer should have a length of 48. length: Length 
	will return zero if the key could not be obtained. If the length is greater 
	than zero, it will be the length of the returned streaming id. Retrieve 
	the stream id after authorizing the shortcode. The authorization window 
	will expire in 5 minutes. Be sure to save the stream key before the window 
	expires. StreamGetStatus() should return the READY status to use this method.
*/
void CoreStreamGetId(
	String shortcode, char* streamId, unsigned char* length);
/*
	Intended for Cloud Gaming Platforms, store the streaming key to persist 
	in user preferences to continue streaming if the game is suspended or closed. 
	shortcode: The shortcode is a null terminated string. Use the shortcode 
	that authorized the stream to obtain the stream key. If the status is in 
	the BROADCASTING or WATCHING state, passing a NULL shortcode will return 
	the active streamId. streamKey should be a preallocated buffer to get the 
	stream key. The buffer should have a length of 48. length: Length will 
	return zero if the key could not be obtained. If the length is greater 
	than zero, it will be the length of the returned streaming key. Retrieve 
	the stream key after authorizing the shortcode. The authorization window 
	will expire in 5 minutes. Be sure to save the stream key before the window 
	expires. StreamGetStatus() should return the READY status to use this method.
*/
void CoreStreamGetKey(
	String shortcode, char* streamKey, unsigned char* length);
/*
	Returns StreamStatus, the current status of the service
*/
ChromaSDK::Stream::StreamStatusType CoreStreamGetStatus();
/*
	Convert StreamStatusType to a printable string
*/
const char* CoreStreamGetStatusString(
	ChromaSDK::Stream::StreamStatusType status);
/*
	This prevents the stream id and stream key from being obtained through the 
	shortcode. This closes the auth window. shortcode is a null terminated 
	string. StreamGetStatus() should return the READY status to use this method. 
	returns success when shortcode has been released
*/
bool CoreStreamReleaseShortcode(
	String shortcode);
/*
	The focus is a null terminated string. Set the focus identifer for the application 
	designated to automatically change the streaming state. Returns true on 
	success.
*/
bool CoreStreamSetFocus(String focus);
/*
	Returns true if the Chroma streaming is supported. If false is returned, 
	avoid calling stream methods.
*/
bool CoreStreamSupportsStreaming();
/*
	Begin watching the Chroma RGB data using streamID parameter. streamId is 
	a null terminated string. StreamGetStatus() should return the READY status 
	to use this method.
*/
bool CoreStreamWatch(
	String streamId, unsigned long long timestamp);
/*
	End watching Chroma RGB data stream. StreamGetStatus() should return the 
	WATCHING status to use this method.
*/
bool CoreStreamWatchEnd();
/*
	Direct access to low level API.
*/
RZRESULT CoreUnInit();
/*
	Creates a `Chroma` animation at the given path. The `deviceType` parameter 
	uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter uses 
	`EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, respective 
	to the `deviceType`. Returns the animation id upon success. Returns negative 
	one upon failure. Saves a `Chroma` animation file with the `.chroma` extension 
	at the given path. Returns the animation id upon success. Returns negative 
	one upon failure.
*/
int CreateAnimation(
	String path, int deviceType, int device);
/*
	Creates a `Chroma` animation in memory without creating a file. The `deviceType` 
	parameter uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter 
	uses `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, 
	respective to the `deviceType`. Returns the animation id upon success. 
	Returns negative one upon failure. Returns the animation id upon success. 
	Returns negative one upon failure.
*/
int CreateAnimationInMemory(
	int deviceType, int device);
/*
	Create a device specific effect.
*/
RZRESULT CreateEffect(
	RZDEVICEID deviceId, ChromaSDK::EFFECT_TYPE effect, int* colors, int size, ChromaSDK::FChromaSDKGuid* effectId);
/*
	Delete an effect given the effect id.
*/
RZRESULT DeleteEffect(
	const ChromaSDK::FChromaSDKGuid& effectId);
/*
	Duplicate the first animation frame so that the animation length matches 
	the frame count. Animation is referenced by id.
*/
void DuplicateFirstFrame(
	int animationId, int frameCount);
/*
	Duplicate the first animation frame so that the animation length matches 
	the frame count. Animation is referenced by name.
*/
void DuplicateFirstFrameName(
	String path, int frameCount);
/*
	D suffix for limited data types.
*/
double DuplicateFirstFrameNameD(
	String path, double frameCount);
/*
	Duplicate all the frames of the animation to double the animation length. 
	Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on. 
	The animation is referenced by id.
*/
void DuplicateFrames(int animationId);
/*
	Duplicate all the frames of the animation to double the animation length. 
	Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on. 
	The animation is referenced by name.
*/
void DuplicateFramesName(String path);
/*
	D suffix for limited data types.
*/
double DuplicateFramesNameD(String path);
/*
	Duplicate all the animation frames in reverse so that the animation plays 
	forwards and backwards. Animation is referenced by id.
*/
void DuplicateMirrorFrames(int animationId);
/*
	Duplicate all the animation frames in reverse so that the animation plays 
	forwards and backwards. Animation is referenced by name.
*/
void DuplicateMirrorFramesName(String path);
/*
	D suffix for limited data types.
*/
double DuplicateMirrorFramesNameD(String path);
/*
	Fade the animation to black starting at the fade frame index to the end 
	of the animation. Animation is referenced by id.
*/
void FadeEndFrames(
	int animationId, int fade);
/*
	Fade the animation to black starting at the fade frame index to the end 
	of the animation. Animation is referenced by name.
*/
void FadeEndFramesName(
	String path, int fade);
/*
	D suffix for limited data types.
*/
double FadeEndFramesNameD(
	String path, double fade);
/*
	Fade the animation from black to full color starting at 0 to the fade frame 
	index. Animation is referenced by id.
*/
void FadeStartFrames(
	int animationId, int fade);
/*
	Fade the animation from black to full color starting at 0 to the fade frame 
	index. Animation is referenced by name.
*/
void FadeStartFramesName(
	String path, int fade);
/*
	D suffix for limited data types.
*/
double FadeStartFramesNameD(
	String path, double fade);
/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
	by id.
*/
void FillColor(
	int animationId, int frameId, int color);
/*
	Set the RGB value for all colors for all frames. Animation is referenced 
	by id.
*/
void FillColorAllFrames(
	int animationId, int color);
/*
	Set the RGB value for all colors for all frames. Animation is referenced 
	by name.
*/
void FillColorAllFramesName(
	String path, int color);
/*
	D suffix for limited data types.
*/
double FillColorAllFramesNameD(
	String path, double color);
/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255 
	for red, green, and blue parameters. Animation is referenced by id.
*/
void FillColorAllFramesRGB(
	int animationId, int red, int green, int blue);
/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255 
	for red, green, and blue parameters. Animation is referenced by name.
*/
void FillColorAllFramesRGBName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillColorAllFramesRGBNameD(
	String path, double red, double green, double blue);
/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
	by name.
*/
void FillColorName(
	String path, int frameId, int color);
/*
	D suffix for limited data types.
*/
double FillColorNameD(
	String path, double frameId, double color);
/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
	by id.
*/
void FillColorRGB(
	int animationId, int frameId, int red, int green, int blue);
/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
	by name.
*/
void FillColorRGBName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillColorRGBNameD(
	String path, double frameId, double red, double green, double blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors in the specified 
	frame. Animation is referenced by id.
*/
void FillNonZeroColor(
	int animationId, int frameId, int color);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors for all frames. 
	Animation is referenced by id.
*/
void FillNonZeroColorAllFrames(
	int animationId, int color);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors for all frames. 
	Animation is referenced by name.
*/
void FillNonZeroColorAllFramesName(
	String path, int color);
/*
	D suffix for limited data types.
*/
double FillNonZeroColorAllFramesNameD(
	String path, double color);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors for all frames. 
	Use the range of 0 to 255 for red, green, and blue parameters. Animation 
	is referenced by id.
*/
void FillNonZeroColorAllFramesRGB(
	int animationId, int red, int green, int blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors for all frames. 
	Use the range of 0 to 255 for red, green, and blue parameters. Animation 
	is referenced by name.
*/
void FillNonZeroColorAllFramesRGBName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillNonZeroColorAllFramesRGBNameD(
	String path, double red, double green, double blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors in the specified 
	frame. Animation is referenced by name.
*/
void FillNonZeroColorName(
	String path, int frameId, int color);
/*
	D suffix for limited data types.
*/
double FillNonZeroColorNameD(
	String path, double frameId, double color);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors in the specified 
	frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation 
	is referenced by id.
*/
void FillNonZeroColorRGB(
	int animationId, int frameId, int red, int green, int blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Set the RGB value for a subset of colors in the specified 
	frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation 
	is referenced by name.
*/
void FillNonZeroColorRGBName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillNonZeroColorRGBNameD(
	String path, double frameId, double red, double green, double blue);
/*
	Fill the frame with random RGB values for the given frame. Animation is 
	referenced by id.
*/
void FillRandomColors(
	int animationId, int frameId);
/*
	Fill the frame with random RGB values for all frames. Animation is referenced 
	by id.
*/
void FillRandomColorsAllFrames(int animationId);
/*
	Fill the frame with random RGB values for all frames. Animation is referenced 
	by name.
*/
void FillRandomColorsAllFramesName(String path);
/*
	D suffix for limited data types.
*/
double FillRandomColorsAllFramesNameD(String path);
/*
	Fill the frame with random black and white values for the specified frame. 
	Animation is referenced by id.
*/
void FillRandomColorsBlackAndWhite(
	int animationId, int frameId);
/*
	Fill the frame with random black and white values for all frames. Animation 
	is referenced by id.
*/
void FillRandomColorsBlackAndWhiteAllFrames(int animationId);
/*
	Fill the frame with random black and white values for all frames. Animation 
	is referenced by name.
*/
void FillRandomColorsBlackAndWhiteAllFramesName(String path);
/*
	D suffix for limited data types.
*/
double FillRandomColorsBlackAndWhiteAllFramesNameD(String path);
/*
	Fill the frame with random black and white values for the specified frame. 
	Animation is referenced by name.
*/
void FillRandomColorsBlackAndWhiteName(
	String path, int frameId);
/*
	D suffix for limited data types.
*/
double FillRandomColorsBlackAndWhiteNameD(
	String path, double frameId);
/*
	Fill the frame with random RGB values for the given frame. Animation is 
	referenced by name.
*/
void FillRandomColorsName(
	String path, int frameId);
/*
	D suffix for limited data types.
*/
double FillRandomColorsNameD(
	String path, double frameId);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by id.
*/
void FillThresholdColors(
	int animationId, int frameId, int threshold, int color);
/*
	Fill all frames with RGB color where the animation color is less than the 
	RGB threshold. Animation is referenced by id.
*/
void FillThresholdColorsAllFrames(
	int animationId, int threshold, int color);
/*
	Fill all frames with RGB color where the animation color is less than the 
	RGB threshold. Animation is referenced by name.
*/
void FillThresholdColorsAllFramesName(
	String path, int threshold, int color);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsAllFramesNameD(
	String path, double threshold, double color);
/*
	Fill all frames with RGB color where the animation color is less than the 
	threshold. Animation is referenced by id.
*/
void FillThresholdColorsAllFramesRGB(
	int animationId, int threshold, int red, int green, int blue);
/*
	Fill all frames with RGB color where the animation color is less than the 
	threshold. Animation is referenced by name.
*/
void FillThresholdColorsAllFramesRGBName(
	String path, int threshold, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsAllFramesRGBNameD(
	String path, double threshold, double red, double green, double blue);
/*
	Fill all frames with the min RGB color where the animation color is less 
	than the min threshold AND with the max RGB color where the animation is 
	more than the max threshold. Animation is referenced by id.
*/
void FillThresholdColorsMinMaxAllFramesRGB(
	int animationId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
/*
	Fill all frames with the min RGB color where the animation color is less 
	than the min threshold AND with the max RGB color where the animation is 
	more than the max threshold. Animation is referenced by name.
*/
void FillThresholdColorsMinMaxAllFramesRGBName(
	String path, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsMinMaxAllFramesRGBNameD(
	String path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
/*
	Fill the specified frame with the min RGB color where the animation color 
	is less than the min threshold AND with the max RGB color where the animation 
	is more than the max threshold. Animation is referenced by id.
*/
void FillThresholdColorsMinMaxRGB(
	int animationId, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
/*
	Fill the specified frame with the min RGB color where the animation color 
	is less than the min threshold AND with the max RGB color where the animation 
	is more than the max threshold. Animation is referenced by name.
*/
void FillThresholdColorsMinMaxRGBName(
	String path, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsMinMaxRGBNameD(
	String path, double frameId, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by name.
*/
void FillThresholdColorsName(
	String path, int frameId, int threshold, int color);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsNameD(
	String path, double frameId, double threshold, double color);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by id.
*/
void FillThresholdColorsRGB(
	int animationId, int frameId, int threshold, int red, int green, int blue);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by name.
*/
void FillThresholdColorsRGBName(
	String path, int frameId, int threshold, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillThresholdColorsRGBNameD(
	String path, double frameId, double threshold, double red, double green, double blue);
/*
	Fill all frames with RGB color where the animation color is less than the 
	RGB threshold. Animation is referenced by id.
*/
void FillThresholdRGBColorsAllFramesRGB(
	int animationId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
/*
	Fill all frames with RGB color where the animation color is less than the 
	RGB threshold. Animation is referenced by name.
*/
void FillThresholdRGBColorsAllFramesRGBName(
	String path, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillThresholdRGBColorsAllFramesRGBNameD(
	String path, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by id.
*/
void FillThresholdRGBColorsRGB(
	int animationId, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
/*
	Fill the specified frame with RGB color where the animation color is less 
	than the RGB threshold. Animation is referenced by name.
*/
void FillThresholdRGBColorsRGBName(
	String path, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillThresholdRGBColorsRGBNameD(
	String path, double frameId, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue);
/*
	Fill the specified frame with RGB color where the animation color is zero. 
	Animation is referenced by id.
*/
void FillZeroColor(
	int animationId, int frameId, int color);
/*
	Fill all frames with RGB color where the animation color is zero. Animation 
	is referenced by id.
*/
void FillZeroColorAllFrames(
	int animationId, int color);
/*
	Fill all frames with RGB color where the animation color is zero. Animation 
	is referenced by name.
*/
void FillZeroColorAllFramesName(
	String path, int color);
/*
	D suffix for limited data types.
*/
double FillZeroColorAllFramesNameD(
	String path, double color);
/*
	Fill all frames with RGB color where the animation color is zero. Animation 
	is referenced by id.
*/
void FillZeroColorAllFramesRGB(
	int animationId, int red, int green, int blue);
/*
	Fill all frames with RGB color where the animation color is zero. Animation 
	is referenced by name.
*/
void FillZeroColorAllFramesRGBName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillZeroColorAllFramesRGBNameD(
	String path, double red, double green, double blue);
/*
	Fill the specified frame with RGB color where the animation color is zero. 
	Animation is referenced by name.
*/
void FillZeroColorName(
	String path, int frameId, int color);
/*
	D suffix for limited data types.
*/
double FillZeroColorNameD(
	String path, double frameId, double color);
/*
	Fill the specified frame with RGB color where the animation color is zero. 
	Animation is referenced by id.
*/
void FillZeroColorRGB(
	int animationId, int frameId, int red, int green, int blue);
/*
	Fill the specified frame with RGB color where the animation color is zero. 
	Animation is referenced by name.
*/
void FillZeroColorRGBName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double FillZeroColorRGBNameD(
	String path, double frameId, double red, double green, double blue);
/*
	Get the animation color for a frame given the `1D` `led`. The `led` should 
	be greater than or equal to 0 and less than the `MaxLeds`. Animation is 
	referenced by id.
*/
int Get1DColor(
	int animationId, int frameId, int led);
/*
	Get the animation color for a frame given the `1D` `led`. The `led` should 
	be greater than or equal to 0 and less than the `MaxLeds`. Animation is 
	referenced by name.
*/
int Get1DColorName(
	String path, int frameId, int led);
/*
	D suffix for limited data types.
*/
double Get1DColorNameD(
	String path, double frameId, double led);
/*
	Get the animation color for a frame given the `2D` `row` and `column`. The 
	`row` should be greater than or equal to 0 and less than the `MaxRow`. 
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
	Animation is referenced by id.
*/
int Get2DColor(
	int animationId, int frameId, int row, int column);
/*
	Get the animation color for a frame given the `2D` `row` and `column`. The 
	`row` should be greater than or equal to 0 and less than the `MaxRow`. 
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
	Animation is referenced by name.
*/
int Get2DColorName(
	String path, int frameId, int row, int column);
/*
	D suffix for limited data types.
*/
double Get2DColorNameD(
	String path, double frameId, double row, double column);
/*
	Get the animation id for the named animation.
*/
int GetAnimation(String name);
/*
	`PluginGetAnimationCount` will return the number of loaded animations.
*/
int GetAnimationCount();
/*
	D suffix for limited data types.
*/
double GetAnimationD(String name);
/*
	`PluginGetAnimationId` will return the `animationId` given the `index` of 
	the loaded animation. The `index` is zero-based and less than the number 
	returned by `PluginGetAnimationCount`. Use `PluginGetAnimationName` to 
	get the name of the animation.
*/
int GetAnimationId(int index);
/*
	`PluginGetAnimationName` takes an `animationId` and returns the name of 
	the animation of the `.chroma` animation file. If a name is not available 
	then an empty string will be returned.
*/
const char* GetAnimationName(int animationId);
/*
	Get the current frame of the animation referenced by id.
*/
int GetCurrentFrame(int animationId);
/*
	Get the current frame of the animation referenced by name.
*/
int GetCurrentFrameName(String path);
/*
	D suffix for limited data types.
*/
double GetCurrentFrameNameD(String path);
/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma` 
	animation respective to the `deviceType`, as an integer upon success. Returns 
	negative one upon failure.
*/
int GetDevice(int animationId);
/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma` 
	animation respective to the `deviceType`, as an integer upon success. Returns 
	negative one upon failure.
*/
int GetDeviceName(String path);
/*
	D suffix for limited data types.
*/
double GetDeviceNameD(String path);
/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer 
	upon success. Returns negative one upon failure.
*/
int GetDeviceType(int animationId);
/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer 
	upon success. Returns negative one upon failure.
*/
int GetDeviceTypeName(String path);
/*
	D suffix for limited data types.
*/
double GetDeviceTypeNameD(String path);
/*
	Get the frame colors and duration (in seconds) for a `Chroma` animation 
	referenced by id. The `color` is expected to be an array of the expected 
	dimensions for the `deviceType/device`. The `length` parameter is the size 
	of the `color` array. For `EChromaSDKDevice1DEnum` the array size should 
	be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX 
	ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard 
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the 
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength. 
	Returns the animation id upon success. Returns negative one upon failure.
*/
int GetFrame(
	int animationId, int frameIndex, float* duration, int* colors, int length, int* keys, int keysLength);
/*
	Returns the frame count of a `Chroma` animation upon success. Returns negative 
	one upon failure.
*/
int GetFrameCount(int animationId);
/*
	Returns the frame count of a `Chroma` animation upon success. Returns negative 
	one upon failure.
*/
int GetFrameCountName(String path);
/*
	D suffix for limited data types.
*/
double GetFrameCountNameD(String path);
/*
	Get the frame colors and duration (in seconds) for a `Chroma` animation 
	referenced by name. The `color` is expected to be an array of the expected 
	dimensions for the `deviceType/device`. The `length` parameter is the size 
	of the `color` array. For `EChromaSDKDevice1DEnum` the array size should 
	be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX 
	ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard 
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the 
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength. 
	Returns the animation id upon success. Returns negative one upon failure.
*/
int GetFrameName(
	String path, int frameIndex, float* duration, int* colors, int length, int* keys, int keysLength);
/*
	Get the color of an animation key for the given frame referenced by id.
*/
int GetKeyColor(
	int animationId, int frameId, int rzkey);
/*
	D suffix for limited data types.
*/
double GetKeyColorD(
	String path, double frameId, double rzkey);
/*
	Get the color of an animation key for the given frame referenced by name.
*/
int GetKeyColorName(
	String path, int frameId, int rzkey);
/*
	Returns `RZRESULT_SUCCESS` if the plugin has been initialized successfully. 
	Returns `RZRESULT_DLL_NOT_FOUND` if core Chroma library is not found. Returns 
	`RZRESULT_DLL_INVALID_SIGNATURE` if core Chroma library has an invalid 
	signature.
*/
RZRESULT GetLibraryLoadedState();
/*
	D suffix for limited data types.
*/
double GetLibraryLoadedStateD();
/*
	Returns the `MAX COLUMN` given the `EChromaSDKDevice2DEnum` device as an 
	integer upon success. Returns negative one upon failure.
*/
int GetMaxColumn(int device);
/*
	D suffix for limited data types.
*/
double GetMaxColumnD(double device);
/*
	Returns the MAX LEDS given the `EChromaSDKDevice1DEnum` device as an integer 
	upon success. Returns negative one upon failure.
*/
int GetMaxLeds(int device);
/*
	D suffix for limited data types.
*/
double GetMaxLedsD(double device);
/*
	Returns the `MAX ROW` given the `EChromaSDKDevice2DEnum` device as an integer 
	upon success. Returns negative one upon failure.
*/
int GetMaxRow(int device);
/*
	D suffix for limited data types.
*/
double GetMaxRowD(double device);
/*
	`PluginGetPlayingAnimationCount` will return the number of playing animations.
*/
int GetPlayingAnimationCount();
/*
	`PluginGetPlayingAnimationId` will return the `animationId` given the `index` 
	of the playing animation. The `index` is zero-based and less than the number 
	returned by `PluginGetPlayingAnimationCount`. Use `PluginGetAnimationName` 
	to get the name of the animation.
*/
int GetPlayingAnimationId(int index);
/*
	Get the RGB color given red, green, and blue.
*/
int GetRGB(
	int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double GetRGBD(
	double red, double green, double blue);
/*
	Check if the animation has loop enabled referenced by id.
*/
bool HasAnimationLoop(int animationId);
/*
	Check if the animation has loop enabled referenced by name.
*/
bool HasAnimationLoopName(String path);
/*
	D suffix for limited data types.
*/
double HasAnimationLoopNameD(String path);
/*
	Initialize the ChromaSDK. Zero indicates success, otherwise failure. Many 
	API methods auto initialize the ChromaSDK if not already initialized.
*/
RZRESULT Init();
/*
	D suffix for limited data types.
*/
double InitD();
/*
	Initialize the ChromaSDK. AppInfo populates the details in Synapse. Zero 
	indicates success, otherwise failure. Many API methods auto initialize 
	the ChromaSDK if not already initialized.
*/
RZRESULT InitSDK(
	ChromaSDK::APPINFOTYPE* AppInfo);
/*
	Insert an animation delay by duplicating the frame by the delay number of 
	times. Animation is referenced by id.
*/
void InsertDelay(
	int animationId, int frameId, int delay);
/*
	Insert an animation delay by duplicating the frame by the delay number of 
	times. Animation is referenced by name.
*/
void InsertDelayName(
	String path, int frameId, int delay);
/*
	D suffix for limited data types.
*/
double InsertDelayNameD(
	String path, double frameId, double delay);
/*
	Duplicate the source frame index at the target frame index. Animation is 
	referenced by id.
*/
void InsertFrame(
	int animationId, int sourceFrame, int targetFrame);
/*
	Duplicate the source frame index at the target frame index. Animation is 
	referenced by name.
*/
void InsertFrameName(
	String path, int sourceFrame, int targetFrame);
/*
	D suffix for limited data types.
*/
double InsertFrameNameD(
	String path, double sourceFrame, double targetFrame);
/*
	Invert all the colors at the specified frame. Animation is referenced by 
	id.
*/
void InvertColors(
	int animationId, int frameId);
/*
	Invert all the colors for all frames. Animation is referenced by id.
*/
void InvertColorsAllFrames(int animationId);
/*
	Invert all the colors for all frames. Animation is referenced by name.
*/
void InvertColorsAllFramesName(String path);
/*
	D suffix for limited data types.
*/
double InvertColorsAllFramesNameD(String path);
/*
	Invert all the colors at the specified frame. Animation is referenced by 
	name.
*/
void InvertColorsName(
	String path, int frameId);
/*
	D suffix for limited data types.
*/
double InvertColorsNameD(
	String path, double frameId);
/*
	Check if the animation is paused referenced by id.
*/
bool IsAnimationPaused(int animationId);
/*
	Check if the animation is paused referenced by name.
*/
bool IsAnimationPausedName(String path);
/*
	D suffix for limited data types.
*/
double IsAnimationPausedNameD(String path);
/*
	The editor dialog is a non-blocking modal window, this method returns true 
	if the modal window is open, otherwise false.
*/
bool IsDialogOpen();
/*
	D suffix for limited data types.
*/
double IsDialogOpenD();
/*
	Returns true if the plugin has been initialized. Returns false if the plugin 
	is uninitialized.
*/
bool IsInitialized();
/*
	D suffix for limited data types.
*/
double IsInitializedD();
/*
	If the method can be invoked the method returns true.
*/
bool IsPlatformSupported();
/*
	D suffix for limited data types.
*/
double IsPlatformSupportedD();
/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`. 
	The named `.chroma` animation file will be automatically opened. The method 
	will return whether the animation is playing or not. Animation is referenced 
	by id.
*/
bool IsPlaying(int animationId);
/*
	D suffix for limited data types.
*/
double IsPlayingD(double animationId);
/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`. 
	The named `.chroma` animation file will be automatically opened. The method 
	will return whether the animation is playing or not. Animation is referenced 
	by name.
*/
bool IsPlayingName(String path);
/*
	D suffix for limited data types.
*/
double IsPlayingNameD(String path);
/*
	`PluginIsPlayingType` automatically handles initializing the `ChromaSDK`. 
	If any animation is playing for the `deviceType` and `device` combination, 
	the method will return true, otherwise false.
*/
bool IsPlayingType(
	int deviceType, int device);
/*
	D suffix for limited data types.
*/
double IsPlayingTypeD(
	double deviceType, double device);
/*
	Do a lerp math operation on a float.
*/
float Lerp(
	float start, float end, float amt);
/*
	Lerp from one color to another given t in the range 0.0 to 1.0.
*/
int LerpColor(
	int from, int to, float t);
/*
	Loads `Chroma` effects so that the animation can be played immediately. 
	Returns the animation id upon success. Returns negative one upon failure.
*/
int LoadAnimation(int animationId);
/*
	D suffix for limited data types.
*/
double LoadAnimationD(double animationId);
/*
	Load the named animation.
*/
void LoadAnimationName(String path);
/*
	Load a composite set of animations.
*/
void LoadComposite(String name);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color defaults to color. Animation 
	is referenced by id.
*/
void MakeBlankFrames(
	int animationId, int frameCount, float duration, int color);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color defaults to color. Animation 
	is referenced by name.
*/
void MakeBlankFramesName(
	String path, int frameCount, float duration, int color);
/*
	D suffix for limited data types.
*/
double MakeBlankFramesNameD(
	String path, double frameCount, double duration, double color);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color is random. Animation is referenced 
	by id.
*/
void MakeBlankFramesRandom(
	int animationId, int frameCount, float duration);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color is random black and white. Animation 
	is referenced by id.
*/
void MakeBlankFramesRandomBlackAndWhite(
	int animationId, int frameCount, float duration);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color is random black and white. Animation 
	is referenced by name.
*/
void MakeBlankFramesRandomBlackAndWhiteName(
	String path, int frameCount, float duration);
/*
	D suffix for limited data types.
*/
double MakeBlankFramesRandomBlackAndWhiteNameD(
	String path, double frameCount, double duration);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color is random. Animation is referenced 
	by name.
*/
void MakeBlankFramesRandomName(
	String path, int frameCount, float duration);
/*
	D suffix for limited data types.
*/
double MakeBlankFramesRandomNameD(
	String path, double frameCount, double duration);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color defaults to color. Animation 
	is referenced by id.
*/
void MakeBlankFramesRGB(
	int animationId, int frameCount, float duration, int red, int green, int blue);
/*
	Make a blank animation for the length of the frame count. Frame duration 
	defaults to the duration. The frame color defaults to color. Animation 
	is referenced by name.
*/
void MakeBlankFramesRGBName(
	String path, int frameCount, float duration, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double MakeBlankFramesRGBNameD(
	String path, double frameCount, double duration, double red, double green, double blue);
/*
	Flips the color grid horizontally for all `Chroma` animation frames. Returns 
	the animation id upon success. Returns negative one upon failure.
*/
int MirrorHorizontally(int animationId);
/*
	Flips the color grid vertically for all `Chroma` animation frames. This 
	method has no effect for `EChromaSDKDevice1DEnum` devices. Returns the 
	animation id upon success. Returns negative one upon failure.
*/
int MirrorVertically(int animationId);
/*
	Multiply the color intensity with the lerp result from color 1 to color 
	2 using the frame index divided by the frame count for the `t` parameter. 
	Animation is referenced in id.
*/
void MultiplyColorLerpAllFrames(
	int animationId, int color1, int color2);
/*
	Multiply the color intensity with the lerp result from color 1 to color 
	2 using the frame index divided by the frame count for the `t` parameter. 
	Animation is referenced in name.
*/
void MultiplyColorLerpAllFramesName(
	String path, int color1, int color2);
/*
	D suffix for limited data types.
*/
double MultiplyColorLerpAllFramesNameD(
	String path, double color1, double color2);
/*
	Multiply all the colors in the frame by the intensity value. The valid the 
	intensity range is from 0.0 to 255.0. RGB components are multiplied equally. 
	An intensity of 0.5 would half the color value. Black colors in the frame 
	will not be affected by this method.
*/
void MultiplyIntensity(
	int animationId, int frameId, float intensity);
/*
	Multiply all the colors for all frames by the intensity value. The valid 
	the intensity range is from 0.0 to 255.0. RGB components are multiplied 
	equally. An intensity of 0.5 would half the color value. Black colors in 
	the frame will not be affected by this method.
*/
void MultiplyIntensityAllFrames(
	int animationId, float intensity);
/*
	Multiply all the colors for all frames by the intensity value. The valid 
	the intensity range is from 0.0 to 255.0. RGB components are multiplied 
	equally. An intensity of 0.5 would half the color value. Black colors in 
	the frame will not be affected by this method.
*/
void MultiplyIntensityAllFramesName(
	String path, float intensity);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityAllFramesNameD(
	String path, double intensity);
/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
	by id.
*/
void MultiplyIntensityAllFramesRGB(
	int animationId, int red, int green, int blue);
/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
	by name.
*/
void MultiplyIntensityAllFramesRGBName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityAllFramesRGBNameD(
	String path, double red, double green, double blue);
/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
	by id.
*/
void MultiplyIntensityColor(
	int animationId, int frameId, int color);
/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
	by id.
*/
void MultiplyIntensityColorAllFrames(
	int animationId, int color);
/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
	by name.
*/
void MultiplyIntensityColorAllFramesName(
	String path, int color);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityColorAllFramesNameD(
	String path, double color);
/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
	by name.
*/
void MultiplyIntensityColorName(
	String path, int frameId, int color);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityColorNameD(
	String path, double frameId, double color);
/*
	Multiply all the colors in the frame by the intensity value. The valid the 
	intensity range is from 0.0 to 255.0. RGB components are multiplied equally. 
	An intensity of 0.5 would half the color value. Black colors in the frame 
	will not be affected by this method.
*/
void MultiplyIntensityName(
	String path, int frameId, float intensity);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityNameD(
	String path, double frameId, double intensity);
/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
	by id.
*/
void MultiplyIntensityRGB(
	int animationId, int frameId, int red, int green, int blue);
/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
	by name.
*/
void MultiplyIntensityRGBName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double MultiplyIntensityRGBNameD(
	String path, double frameId, double red, double green, double blue);
/*
	Multiply the specific frame by the color lerp result between color 1 and 
	2 using the frame color value as the `t` value. Animation is referenced 
	by id.
*/
void MultiplyNonZeroTargetColorLerp(
	int animationId, int frameId, int color1, int color2);
/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
	the frame color value as the `t` value. Animation is referenced by id.
*/
void MultiplyNonZeroTargetColorLerpAllFrames(
	int animationId, int color1, int color2);
/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
	the frame color value as the `t` value. Animation is referenced by name.
*/
void MultiplyNonZeroTargetColorLerpAllFramesName(
	String path, int color1, int color2);
/*
	D suffix for limited data types.
*/
double MultiplyNonZeroTargetColorLerpAllFramesNameD(
	String path, double color1, double color2);
/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2 
	using the frame color value as the `t` value. Animation is referenced by 
	id.
*/
void MultiplyNonZeroTargetColorLerpAllFramesRGB(
	int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2);
/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2 
	using the frame color value as the `t` value. Animation is referenced by 
	name.
*/
void MultiplyNonZeroTargetColorLerpAllFramesRGBName(
	String path, int red1, int green1, int blue1, int red2, int green2, int blue2);
/*
	D suffix for limited data types.
*/
double MultiplyNonZeroTargetColorLerpAllFramesRGBNameD(
	String path, double red1, double green1, double blue1, double red2, double green2, double blue2);
/*
	Multiply the specific frame by the color lerp result between color 1 and 
	2 using the frame color value as the `t` value. Animation is referenced 
	by id.
*/
void MultiplyTargetColorLerp(
	int animationId, int frameId, int color1, int color2);
/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
	the frame color value as the `t` value. Animation is referenced by id.
*/
void MultiplyTargetColorLerpAllFrames(
	int animationId, int color1, int color2);
/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
	the frame color value as the `t` value. Animation is referenced by name.
*/
void MultiplyTargetColorLerpAllFramesName(
	String path, int color1, int color2);
/*
	D suffix for limited data types.
*/
double MultiplyTargetColorLerpAllFramesNameD(
	String path, double color1, double color2);
/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the 
	frame color value as the `t` value. Animation is referenced by id.
*/
void MultiplyTargetColorLerpAllFramesRGB(
	int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2);
/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the 
	frame color value as the `t` value. Animation is referenced by name.
*/
void MultiplyTargetColorLerpAllFramesRGBName(
	String path, int red1, int green1, int blue1, int red2, int green2, int blue2);
/*
	D suffix for limited data types.
*/
double MultiplyTargetColorLerpAllFramesRGBNameD(
	String path, double red1, double green1, double blue1, double red2, double green2, double blue2);
/*
	Multiply the specific frame by the color lerp result between color 1 and 
	2 using the frame color value as the `t` value. Animation is referenced 
	by name.
*/
void MultiplyTargetColorLerpName(
	String path, int frameId, int color1, int color2);
/*
	Offset all colors in the frame using the RGB offset. Use the range of -255 
	to 255 for red, green, and blue parameters. Negative values remove color. 
	Positive values add color.
*/
void OffsetColors(
	int animationId, int frameId, int red, int green, int blue);
/*
	Offset all colors for all frames using the RGB offset. Use the range of 
	-255 to 255 for red, green, and blue parameters. Negative values remove 
	color. Positive values add color.
*/
void OffsetColorsAllFrames(
	int animationId, int red, int green, int blue);
/*
	Offset all colors for all frames using the RGB offset. Use the range of 
	-255 to 255 for red, green, and blue parameters. Negative values remove 
	color. Positive values add color.
*/
void OffsetColorsAllFramesName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double OffsetColorsAllFramesNameD(
	String path, double red, double green, double blue);
/*
	Offset all colors in the frame using the RGB offset. Use the range of -255 
	to 255 for red, green, and blue parameters. Negative values remove color. 
	Positive values add color.
*/
void OffsetColorsName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double OffsetColorsNameD(
	String path, double frameId, double red, double green, double blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Offset a subset of colors in the frame using the RGB offset. 
	Use the range of -255 to 255 for red, green, and blue parameters. Negative 
	values remove color. Positive values add color.
*/
void OffsetNonZeroColors(
	int animationId, int frameId, int red, int green, int blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Offset a subset of colors for all frames using the RGB offset. 
	Use the range of -255 to 255 for red, green, and blue parameters. Negative 
	values remove color. Positive values add color.
*/
void OffsetNonZeroColorsAllFrames(
	int animationId, int red, int green, int blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Offset a subset of colors for all frames using the RGB offset. 
	Use the range of -255 to 255 for red, green, and blue parameters. Negative 
	values remove color. Positive values add color.
*/
void OffsetNonZeroColorsAllFramesName(
	String path, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double OffsetNonZeroColorsAllFramesNameD(
	String path, double red, double green, double blue);
/*
	This method will only update colors in the animation that are not already 
	set to black. Offset a subset of colors in the frame using the RGB offset. 
	Use the range of -255 to 255 for red, green, and blue parameters. Negative 
	values remove color. Positive values add color.
*/
void OffsetNonZeroColorsName(
	String path, int frameId, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double OffsetNonZeroColorsNameD(
	String path, double frameId, double red, double green, double blue);
/*
	Opens a `Chroma` animation file so that it can be played. Returns an animation 
	id >= 0 upon success. Returns negative one if there was a failure. The 
	animation id is used in most of the API methods.
*/
int OpenAnimation(String path);
/*
	D suffix for limited data types.
*/
double OpenAnimationD(String path);
/*
	Opens a `Chroma` animation data from memory so that it can be played. `Data` 
	is a pointer to BYTE array of the loaded animation in memory. `Name` will 
	be assigned to the animation when loaded. Returns an animation id >= 0 
	upon success. Returns negative one if there was a failure. The animation 
	id is used in most of the API methods.
*/
int OpenAnimationFromMemory(
	const BYTE* data, String name);
/*
	Opens a `Chroma` animation file with the `.chroma` extension. Returns zero 
	upon success. Returns negative one if there was a failure.
*/
int OpenEditorDialog(String path);
/*
	Open the named animation in the editor dialog and play the animation at 
	start.
*/
int OpenEditorDialogAndPlay(String path);
/*
	D suffix for limited data types.
*/
double OpenEditorDialogAndPlayD(String path);
/*
	D suffix for limited data types.
*/
double OpenEditorDialogD(String path);
/*
	Sets the `duration` for all grames in the `Chroma` animation to the `duration` 
	parameter. Returns the animation id upon success. Returns negative one 
	upon failure.
*/
int OverrideFrameDuration(
	int animationId, float duration);
/*
	D suffix for limited data types.
*/
double OverrideFrameDurationD(
	double animationId, double duration);
/*
	Override the duration of all frames with the `duration` value. Animation 
	is referenced by name.
*/
void OverrideFrameDurationName(
	String path, float duration);
/*
	Pause the current animation referenced by id.
*/
void PauseAnimation(int animationId);
/*
	Pause the current animation referenced by name.
*/
void PauseAnimationName(String path);
/*
	D suffix for limited data types.
*/
double PauseAnimationNameD(String path);
/*
	Plays the `Chroma` animation. This will load the animation, if not loaded 
	previously. Returns the animation id upon success. Returns negative one 
	upon failure.
*/
int PlayAnimation(int animationId);
/*
	D suffix for limited data types.
*/
double PlayAnimationD(double animationId);
/*
	`PluginPlayAnimationFrame` automatically handles initializing the `ChromaSDK`. 
	The method will play the animation given the `animationId` with looping 
	`on` or `off` starting at the `frameId`.
*/
void PlayAnimationFrame(
	int animationId, int frameId, bool loop);
/*
	`PluginPlayAnimationFrameName` automatically handles initializing the `ChromaSDK`. 
	The named `.chroma` animation file will be automatically opened. The animation 
	will play with looping `on` or `off` starting at the `frameId`.
*/
void PlayAnimationFrameName(
	String path, int frameId, bool loop);
/*
	D suffix for limited data types.
*/
double PlayAnimationFrameNameD(
	String path, double frameId, double loop);
/*
	`PluginPlayAnimationLoop` automatically handles initializing the `ChromaSDK`. 
	The method will play the animation given the `animationId` with looping 
	`on` or `off`.
*/
void PlayAnimationLoop(
	int animationId, bool loop);
/*
	`PluginPlayAnimationName` automatically handles initializing the `ChromaSDK`. 
	The named `.chroma` animation file will be automatically opened. The animation 
	will play with looping `on` or `off`.
*/
void PlayAnimationName(
	String path, bool loop);
/*
	D suffix for limited data types.
*/
double PlayAnimationNameD(
	String path, double loop);
/*
	`PluginPlayComposite` automatically handles initializing the `ChromaSDK`. 
	The named animation files for the `.chroma` set will be automatically opened. 
	The set of animations will play with looping `on` or `off`.
*/
void PlayComposite(
	String name, bool loop);
/*
	D suffix for limited data types.
*/
double PlayCompositeD(
	String name, double loop);
/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`. 
	Returns the animation id upon success. Returns negative one upon failure.
*/
int PreviewFrame(
	int animationId, int frameIndex);
/*
	D suffix for limited data types.
*/
double PreviewFrameD(
	double animationId, double frameIndex);
/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`. 
	Animaton is referenced by name.
*/
void PreviewFrameName(
	String path, int frameIndex);
/*
	Reduce the frames of the animation by removing every nth element. Animation 
	is referenced by id.
*/
void ReduceFrames(
	int animationId, int n);
/*
	Reduce the frames of the animation by removing every nth element. Animation 
	is referenced by name.
*/
void ReduceFramesName(
	String path, int n);
/*
	D suffix for limited data types.
*/
double ReduceFramesNameD(
	String path, double n);
/*
	Resets the `Chroma` animation to 1 blank frame. Returns the animation id 
	upon success. Returns negative one upon failure.
*/
int ResetAnimation(int animationId);
/*
	Resume the animation with loop `ON` or `OFF` referenced by id.
*/
void ResumeAnimation(
	int animationId, bool loop);
/*
	Resume the animation with loop `ON` or `OFF` referenced by name.
*/
void ResumeAnimationName(
	String path, bool loop);
/*
	D suffix for limited data types.
*/
double ResumeAnimationNameD(
	String path, double loop);
/*
	Reverse the animation frame order of the `Chroma` animation. Returns the 
	animation id upon success. Returns negative one upon failure. Animation 
	is referenced by id.
*/
int Reverse(int animationId);
/*
	Reverse the animation frame order of the `Chroma` animation. Animation is 
	referenced by id.
*/
void ReverseAllFrames(int animationId);
/*
	Reverse the animation frame order of the `Chroma` animation. Animation is 
	referenced by name.
*/
void ReverseAllFramesName(String path);
/*
	D suffix for limited data types.
*/
double ReverseAllFramesNameD(String path);
/*
	Save the animation referenced by id to the path specified.
*/
int SaveAnimation(
	int animationId, String path);
/*
	Save the named animation to the target path specified.
*/
int SaveAnimationName(
	String sourceAnimation, String targetAnimation);
/*
	Set the animation color for a frame given the `1D` `led`. The `led` should 
	be greater than or equal to 0 and less than the `MaxLeds`. The animation 
	is referenced by id.
*/
void Set1DColor(
	int animationId, int frameId, int led, int color);
/*
	Set the animation color for a frame given the `1D` `led`. The `led` should 
	be greater than or equal to 0 and less than the `MaxLeds`. The animation 
	is referenced by name.
*/
void Set1DColorName(
	String path, int frameId, int led, int color);
/*
	D suffix for limited data types.
*/
double Set1DColorNameD(
	String path, double frameId, double led, double color);
/*
	Set the animation color for a frame given the `2D` `row` and `column`. The 
	`row` should be greater than or equal to 0 and less than the `MaxRow`. 
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
	The animation is referenced by id.
*/
void Set2DColor(
	int animationId, int frameId, int row, int column, int color);
/*
	Set the animation color for a frame given the `2D` `row` and `column`. The 
	`row` should be greater than or equal to 0 and less than the `MaxRow`. 
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
	The animation is referenced by name.
*/
void Set2DColorName(
	String path, int frameId, int row, int column, int color);
/*
	D suffix for limited data types.
*/
double Set2DColorNameD(
	String path, double frameId, double rowColumnIndex, double color);
/*
	When custom color is set, the custom key mode will be used. The animation 
	is referenced by id.
*/
void SetChromaCustomColorAllFrames(int animationId);
/*
	When custom color is set, the custom key mode will be used. The animation 
	is referenced by name.
*/
void SetChromaCustomColorAllFramesName(String path);
/*
	D suffix for limited data types.
*/
double SetChromaCustomColorAllFramesNameD(String path);
/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout 
	from grid to key. `True` changes the layout from key to grid. Animation 
	is referenced by id.
*/
void SetChromaCustomFlag(
	int animationId, bool flag);
/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout 
	from grid to key. `True` changes the layout from key to grid. Animation 
	is referenced by name.
*/
void SetChromaCustomFlagName(
	String path, bool flag);
/*
	D suffix for limited data types.
*/
double SetChromaCustomFlagNameD(
	String path, double flag);
/*
	Set the current frame of the animation referenced by id.
*/
void SetCurrentFrame(
	int animationId, int frameId);
/*
	Set the current frame of the animation referenced by name.
*/
void SetCurrentFrameName(
	String path, int frameId);
/*
	D suffix for limited data types.
*/
double SetCurrentFrameNameD(
	String path, double frameId);
/*
	Set the custom alpha flag on the color array
*/
RZRESULT SetCustomColorFlag2D(
	int device, int* colors);
/*
	Changes the `deviceType` and `device` of a `Chroma` animation. If the device 
	is changed, the `Chroma` animation will be reset with 1 blank frame. Returns 
	the animation id upon success. Returns negative one upon failure.
*/
int SetDevice(
	int animationId, int deviceType, int device);
/*
	SetEffect will display the referenced effect id.
*/
RZRESULT SetEffect(
	const ChromaSDK::FChromaSDKGuid& effectId);
/*
	SetEffectCustom1D will display the referenced colors immediately
*/
RZRESULT SetEffectCustom1D(
	const int device, Array colors);
/*
	SetEffectCustom2D will display the referenced colors immediately.
*/
RZRESULT SetEffectCustom2D(
	const int device, Array colors);
/*
	SetEffectKeyboardCustom2D will display the referenced custom keyboard colors 
	immediately. Colors represent a visual grid layout. Keys represent the 
	hotkeys for any layout.
*/
RZRESULT SetEffectKeyboardCustom2D(
	const int device, Array colors, Array keys);
/*
	When the idle animation is used, the named animation will play when no other 
	animations are playing. Reference the animation by id.
*/
void SetIdleAnimation(int animationId);
/*
	When the idle animation is used, the named animation will play when no other 
	animations are playing. Reference the animation by name.
*/
void SetIdleAnimationName(String path);
/*
	Set animation key to a static color for the given frame.
*/
void SetKeyColor(
	int animationId, int frameId, int rzkey, int color);
/*
	Set the key to the specified key color for all frames. Animation is referenced 
	by id.
*/
void SetKeyColorAllFrames(
	int animationId, int rzkey, int color);
/*
	Set the key to the specified key color for all frames. Animation is referenced 
	by name.
*/
void SetKeyColorAllFramesName(
	String path, int rzkey, int color);
/*
	D suffix for limited data types.
*/
double SetKeyColorAllFramesNameD(
	String path, double rzkey, double color);
/*
	Set the key to the specified key color for all frames. Animation is referenced 
	by id.
*/
void SetKeyColorAllFramesRGB(
	int animationId, int rzkey, int red, int green, int blue);
/*
	Set the key to the specified key color for all frames. Animation is referenced 
	by name.
*/
void SetKeyColorAllFramesRGBName(
	String path, int rzkey, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double SetKeyColorAllFramesRGBNameD(
	String path, double rzkey, double red, double green, double blue);
/*
	Set animation key to a static color for the given frame.
*/
void SetKeyColorName(
	String path, int frameId, int rzkey, int color);
/*
	D suffix for limited data types.
*/
double SetKeyColorNameD(
	String path, double frameId, double rzkey, double color);
/*
	Set the key to the specified key color for the specified frame. Animation 
	is referenced by id.
*/
void SetKeyColorRGB(
	int animationId, int frameId, int rzkey, int red, int green, int blue);
/*
	Set the key to the specified key color for the specified frame. Animation 
	is referenced by name.
*/
void SetKeyColorRGBName(
	String path, int frameId, int rzkey, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double SetKeyColorRGBNameD(
	String path, double frameId, double rzkey, double red, double green, double blue);
/*
	Set animation key to a static color for the given frame if the existing 
	color is not already black.
*/
void SetKeyNonZeroColor(
	int animationId, int frameId, int rzkey, int color);
/*
	Set animation key to a static color for the given frame if the existing 
	color is not already black.
*/
void SetKeyNonZeroColorName(
	String path, int frameId, int rzkey, int color);
/*
	D suffix for limited data types.
*/
double SetKeyNonZeroColorNameD(
	String path, double frameId, double rzkey, double color);
/*
	Set the key to the specified key color for the specified frame where color 
	is not black. Animation is referenced by id.
*/
void SetKeyNonZeroColorRGB(
	int animationId, int frameId, int rzkey, int red, int green, int blue);
/*
	Set the key to the specified key color for the specified frame where color 
	is not black. Animation is referenced by name.
*/
void SetKeyNonZeroColorRGBName(
	String path, int frameId, int rzkey, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double SetKeyNonZeroColorRGBNameD(
	String path, double frameId, double rzkey, double red, double green, double blue);
/*
	Set animation key by row and column to a static color for the given frame.
*/
void SetKeyRowColumnColorName(
	String path, int frameId, int row, int column, int color);
/*
	Set an array of animation keys to a static color for the given frame. Animation 
	is referenced by id.
*/
void SetKeysColor(
	int animationId, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames. Animation 
	is referenced by id.
*/
void SetKeysColorAllFrames(
	int animationId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames. Animation 
	is referenced by name.
*/
void SetKeysColorAllFramesName(
	String path, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames. Animation 
	is referenced by id.
*/
void SetKeysColorAllFramesRGB(
	int animationId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for all frames. Animation 
	is referenced by name.
*/
void SetKeysColorAllFramesRGBName(
	String path, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame.
*/
void SetKeysColorName(
	String path, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for the given frame. Animation 
	is referenced by id.
*/
void SetKeysColorRGB(
	int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame. Animation 
	is referenced by name.
*/
void SetKeysColorRGBName(
	String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame if 
	the existing color is not already black.
*/
void SetKeysNonZeroColor(
	int animationId, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is not black. Animation is referenced by id.
*/
void SetKeysNonZeroColorAllFrames(
	int animationId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames if the existing 
	color is not already black. Reference animation by name.
*/
void SetKeysNonZeroColorAllFramesName(
	String path, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for the given frame if 
	the existing color is not already black. Reference animation by name.
*/
void SetKeysNonZeroColorName(
	String path, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is not black. Animation is referenced by id.
*/
void SetKeysNonZeroColorRGB(
	int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is not black. Animation is referenced by name.
*/
void SetKeysNonZeroColorRGBName(
	String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is black. Animation is referenced by id.
*/
void SetKeysZeroColor(
	int animationId, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames where the 
	color is black. Animation is referenced by id.
*/
void SetKeysZeroColorAllFrames(
	int animationId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames where the 
	color is black. Animation is referenced by name.
*/
void SetKeysZeroColorAllFramesName(
	String path, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for all frames where the 
	color is black. Animation is referenced by id.
*/
void SetKeysZeroColorAllFramesRGB(
	int animationId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for all frames where the 
	color is black. Animation is referenced by name.
*/
void SetKeysZeroColorAllFramesRGBName(
	String path, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is black. Animation is referenced by name.
*/
void SetKeysZeroColorName(
	String path, int frameId, Array rzkeys, int keyCount, int color);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is black. Animation is referenced by id.
*/
void SetKeysZeroColorRGB(
	int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set an array of animation keys to a static color for the given frame where 
	the color is black. Animation is referenced by name.
*/
void SetKeysZeroColorRGBName(
	String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue);
/*
	Set animation key to a static color for the given frame where the color 
	is black. Animation is referenced by id.
*/
void SetKeyZeroColor(
	int animationId, int frameId, int rzkey, int color);
/*
	Set animation key to a static color for the given frame where the color 
	is black. Animation is referenced by name.
*/
void SetKeyZeroColorName(
	String path, int frameId, int rzkey, int color);
/*
	D suffix for limited data types.
*/
double SetKeyZeroColorNameD(
	String path, double frameId, double rzkey, double color);
/*
	Set animation key to a static color for the given frame where the color 
	is black. Animation is referenced by id.
*/
void SetKeyZeroColorRGB(
	int animationId, int frameId, int rzkey, int red, int green, int blue);
/*
	Set animation key to a static color for the given frame where the color 
	is black. Animation is referenced by name.
*/
void SetKeyZeroColorRGBName(
	String path, int frameId, int rzkey, int red, int green, int blue);
/*
	D suffix for limited data types.
*/
double SetKeyZeroColorRGBNameD(
	String path, double frameId, double rzkey, double red, double green, double blue);
/*
	Invokes the setup for a debug logging callback so that `stdout` is redirected 
	to the callback. This is used by `Unity` so that debug messages can appear 
	in the console window.
*/
void SetLogDelegate(DebugLogPtr fp);
/*
	Sets the target device to the static color.
*/
void SetStaticColor(
	int deviceType, int device, int color);
/*
	Sets all devices to the static color.
*/
void SetStaticColorAll(int color);
/*
	Sets the target device to the static color.
*/
void StaticColor(
	int deviceType, int device, int color);
/*
	Sets all devices to the static color.
*/
void StaticColorAll(int color);
/*
	D suffix for limited data types.
*/
double StaticColorD(
	double deviceType, double device, double color);
/*
	`PluginStopAll` will automatically stop all animations that are playing.
*/
void StopAll();
/*
	Stops animation playback if in progress. Returns the animation id upon success. 
	Returns negative one upon failure.
*/
int StopAnimation(int animationId);
/*
	D suffix for limited data types.
*/
double StopAnimationD(double animationId);
/*
	`PluginStopAnimationName` automatically handles initializing the `ChromaSDK`. 
	The named `.chroma` animation file will be automatically opened. The animation 
	will stop if playing.
*/
void StopAnimationName(String path);
/*
	D suffix for limited data types.
*/
double StopAnimationNameD(String path);
/*
	`PluginStopAnimationType` automatically handles initializing the `ChromaSDK`. 
	If any animation is playing for the `deviceType` and `device` combination, 
	it will be stopped.
*/
void StopAnimationType(
	int deviceType, int device);
/*
	D suffix for limited data types.
*/
double StopAnimationTypeD(
	double deviceType, double device);
/*
	`PluginStopComposite` automatically handles initializing the `ChromaSDK`. 
	The named animation files for the `.chroma` set will be automatically opened. 
	The set of animations will be stopped if playing.
*/
void StopComposite(String name);
/*
	D suffix for limited data types.
*/
double StopCompositeD(String name);
/*
	Return color1 - color2
*/
int SubtractColor(
	const int color1, const int color2);
/*
	Subtract the source color from the target color for the frame where the 
	target color is not black. Source and target are referenced by id.
*/
void SubtractNonZeroAllKeys(
	int sourceAnimationId, int targetAnimationId, int frameId);
/*
	Subtract the source color from the target color for all frames where the 
	target color is not black. Source and target are referenced by id.
*/
void SubtractNonZeroAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Subtract the source color from the target color for all frames where the 
	target color is not black. Source and target are referenced by name.
*/
void SubtractNonZeroAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Subtract the source color from the target color for all frames where the 
	target color is not black starting at offset for the length of the source. 
	Source and target are referenced by id.
*/
void SubtractNonZeroAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Subtract the source color from the target color for all frames where the 
	target color is not black starting at offset for the length of the source. 
	Source and target are referenced by name.
*/
void SubtractNonZeroAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Subtract the source color from the target color for the frame where the 
	target color is not black. Source and target are referenced by name.
*/
void SubtractNonZeroAllKeysName(
	String sourceAnimation, String targetAnimation, int frameId);
/*
	Subtract the source color from the target where color is not black for the 
	source frame and target offset frame, reference source and target by id.
*/
void SubtractNonZeroAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Subtract the source color from the target where color is not black for the 
	source frame and target offset frame, reference source and target by name.
*/
void SubtractNonZeroAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Subtract the source color from the target color where the target color is 
	not black for all frames. Reference source and target by id.
*/
void SubtractNonZeroTargetAllKeysAllFrames(
	int sourceAnimationId, int targetAnimationId);
/*
	Subtract the source color from the target color where the target color is 
	not black for all frames. Reference source and target by name.
*/
void SubtractNonZeroTargetAllKeysAllFramesName(
	String sourceAnimation, String targetAnimation);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroTargetAllKeysAllFramesNameD(
	String sourceAnimation, String targetAnimation);
/*
	Subtract the source color from the target color where the target color is 
	not black for all frames starting at the target offset for the length of 
	the source. Reference source and target by id.
*/
void SubtractNonZeroTargetAllKeysAllFramesOffset(
	int sourceAnimationId, int targetAnimationId, int offset);
/*
	Subtract the source color from the target color where the target color is 
	not black for all frames starting at the target offset for the length of 
	the source. Reference source and target by name.
*/
void SubtractNonZeroTargetAllKeysAllFramesOffsetName(
	String sourceAnimation, String targetAnimation, int offset);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroTargetAllKeysAllFramesOffsetNameD(
	String sourceAnimation, String targetAnimation, double offset);
/*
	Subtract the source color from the target color where the target color is 
	not black from the source frame to the target offset frame. Reference source 
	and target by id.
*/
void SubtractNonZeroTargetAllKeysOffset(
	int sourceAnimationId, int targetAnimationId, int frameId, int offset);
/*
	Subtract the source color from the target color where the target color is 
	not black from the source frame to the target offset frame. Reference source 
	and target by name.
*/
void SubtractNonZeroTargetAllKeysOffsetName(
	String sourceAnimation, String targetAnimation, int frameId, int offset);
/*
	D suffix for limited data types.
*/
double SubtractNonZeroTargetAllKeysOffsetNameD(
	String sourceAnimation, String targetAnimation, double frameId, double offset);
/*
	Subtract all frames with the min RGB color where the animation color is 
	less than the min threshold AND with the max RGB color where the animation 
	is more than the max threshold. Animation is referenced by id.
*/
void SubtractThresholdColorsMinMaxAllFramesRGB(
	const int animationId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
/*
	Subtract all frames with the min RGB color where the animation color is 
	less than the min threshold AND with the max RGB color where the animation 
	is more than the max threshold. Animation is referenced by name.
*/
void SubtractThresholdColorsMinMaxAllFramesRGBName(
	String path, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
/*
	D suffix for limited data types.
*/
double SubtractThresholdColorsMinMaxAllFramesRGBNameD(
	String path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
/*
	Subtract the specified frame with the min RGB color where the animation 
	color is less than the min threshold AND with the max RGB color where the 
	animation is more than the max threshold. Animation is referenced by id.
*/
void SubtractThresholdColorsMinMaxRGB(
	const int animationId, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
/*
	Subtract the specified frame with the min RGB color where the animation 
	color is less than the min threshold AND with the max RGB color where the 
	animation is more than the max threshold. Animation is referenced by name.
*/
void SubtractThresholdColorsMinMaxRGBName(
	String path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
/*
	D suffix for limited data types.
*/
double SubtractThresholdColorsMinMaxRGBNameD(
	String path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
/*
	Trim the end of the animation. The length of the animation will be the lastFrameId 
	plus one. Reference the animation by id.
*/
void TrimEndFrames(
	int animationId, int lastFrameId);
/*
	Trim the end of the animation. The length of the animation will be the lastFrameId 
	plus one. Reference the animation by name.
*/
void TrimEndFramesName(
	String path, int lastFrameId);
/*
	D suffix for limited data types.
*/
double TrimEndFramesNameD(
	String path, double lastFrameId);
/*
	Remove the frame from the animation. Reference animation by id.
*/
void TrimFrame(
	int animationId, int frameId);
/*
	Remove the frame from the animation. Reference animation by name.
*/
void TrimFrameName(
	String path, int frameId);
/*
	D suffix for limited data types.
*/
double TrimFrameNameD(
	String path, double frameId);
/*
	Trim the start of the animation starting at frame 0 for the number of frames. 
	Reference the animation by id.
*/
void TrimStartFrames(
	int animationId, int numberOfFrames);
/*
	Trim the start of the animation starting at frame 0 for the number of frames. 
	Reference the animation by name.
*/
void TrimStartFramesName(
	String path, int numberOfFrames);
/*
	D suffix for limited data types.
*/
double TrimStartFramesNameD(
	String path, double numberOfFrames);
/*
	Uninitializes the `ChromaSDK`. Returns 0 upon success. Returns negative 
	one upon failure.
*/
RZRESULT Uninit();
/*
	D suffix for limited data types.
*/
double UninitD();
/*
	Unloads `Chroma` effects to free up resources. Returns the animation id 
	upon success. Returns negative one upon failure. Reference the animation 
	by id.
*/
int UnloadAnimation(int animationId);
/*
	D suffix for limited data types.
*/
double UnloadAnimationD(double animationId);
/*
	Unload the animation effects. Reference the animation by name.
*/
void UnloadAnimationName(String path);
/*
	Unload the the composite set of animation effects. Reference the animation 
	by name.
*/
void UnloadComposite(String name);
/*
	Unload the Razer Chroma SDK Library before exiting the application.
*/
void UnloadLibrarySDK();
/*
	Unload the Razer Chroma Streaming Plugin Library before exiting the application.
*/
void UnloadLibraryStreamingPlugin();
/*
	Updates the `frameIndex` of the `Chroma` animation referenced by id and 
	sets the `duration` (in seconds). The `color` is expected to be an array 
	of the dimensions for the `deviceType/device`. The `length` parameter is 
	the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size 
	should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should 
	be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard 
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the 
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
*/
int UpdateFrame(
	int animationId, int frameIndex, float duration, int* colors, int length, int* keys, int keysLength);
/*
	Update the `frameIndex` of the `Chroma` animation referenced by name and 
	sets the `duration` (in seconds). The `color` is expected to be an array 
	of the dimensions for the `deviceType/device`. The `length` parameter is 
	the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size 
	should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should 
	be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard 
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the 
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength. 
	Returns the animation id upon success. Returns negative one upon failure.
*/
int UpdateFrameName(
	String path, int frameIndex, float duration, int* colors, int length, int* keys, int keysLength);
/*
	When the idle animation flag is true, when no other animations are playing, 
	the idle animation will be used. The idle animation will not be affected 
	by the API calls to PluginIsPlaying, PluginStopAnimationType, PluginGetPlayingAnimationId, 
	and PluginGetPlayingAnimationCount. Then the idle animation flag is false, 
	the idle animation is disabled. `Device` uses `EChromaSDKDeviceEnum` enums.
*/
void UseIdleAnimation(
	int device, bool flag);
/*
	Set idle animation flag for all devices.
*/
void UseIdleAnimations(bool flag);
/*
	Set preloading animation flag, which is set to true by default. Reference 
	animation by id.
*/
void UsePreloading(
	int animationId, bool flag);
/*
	Set preloading animation flag, which is set to true by default. Reference 
	animation by name.
*/
void UsePreloadingName(
	String path, bool flag);
#pragma endregion
