#pragma region Autogenerated lua C functions
	/*
	Adds a frame to the `Chroma` animation and sets the `duration` (in seconds). 
		The `color` is expected to be an array of the dimensions for the `deviceType/device`. 
		The `length` parameter is the size of the `color` array. For `EChromaSDKDevice1DEnum` 
		the array size should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array 
		size should be `MAX ROW` * `MAX COLUMN`. Returns the animation id upon 
		success. Returns -1 upon failure.
	*/
	static int LuaAddFrame(lua::lua_State* state);
	/*
	Add source color to target where color is not black for all frames, reference 
		source and target by id.
	*/
	static int LuaAddNonZeroAllKeysAllFrames(lua::lua_State* state);
	/*
	Add source color to target where color is not black for all frames, reference 
		source and target by name.
	*/
	static int LuaAddNonZeroAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Add source color to target where color is not black for all frames starting 
		at offset for the length of the source, reference source and target by 
		id.
	*/
	static int LuaAddNonZeroAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Add source color to target where color is not black for all frames starting 
		at offset for the length of the source, reference source and target by 
		name.
	*/
	static int LuaAddNonZeroAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Add source color to target where color is not black for the source frame 
		and target offset frame, reference source and target by id.
	*/
	static int LuaAddNonZeroAllKeysOffset(lua::lua_State* state);
	/*
	Add source color to target where color is not black for the source frame 
		and target offset frame, reference source and target by name.
	*/
	static int LuaAddNonZeroAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Add source color to target where the target color is not black for all frames, 
		reference source and target by id.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFrames(lua::lua_State* state);
	/*
	Add source color to target where the target color is not black for all frames, 
		reference source and target by name.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Add source color to target where the target color is not black for all frames 
		starting at offset for the length of the source, reference source and target 
		by id.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Add source color to target where the target color is not black for all frames 
		starting at offset for the length of the source, reference source and target 
		by name.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroTargetAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Add source color to target where target color is not blank from the source 
		frame to the target offset frame, reference source and target by id.
	*/
	static int LuaAddNonZeroTargetAllKeysOffset(lua::lua_State* state);
	/*
	Add source color to target where target color is not blank from the source 
		frame to the target offset frame, reference source and target by name.
	*/
	static int LuaAddNonZeroTargetAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAddNonZeroTargetAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Append all source frames to the target animation, reference source and target 
		by id.
	*/
	static int LuaAppendAllFrames(lua::lua_State* state);
	/*
	Append all source frames to the target animation, reference source and target 
		by name.
	*/
	static int LuaAppendAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaAppendAllFramesNameD(lua::lua_State* state);
	/*
	`PluginClearAll` will issue a `CLEAR` effect for all devices.
	*/
	static int LuaClearAll(lua::lua_State* state);
	/*
	`PluginClearAnimationType` will issue a `CLEAR` effect for the given device.
	*/
	static int LuaClearAnimationType(lua::lua_State* state);
	/*
	`PluginCloseAll` closes all open animations so they can be reloaded from 
		disk. The set of animations will be stopped if playing.
	*/
	static int LuaCloseAll(lua::lua_State* state);
	/*
	Closes the `Chroma` animation to free up resources referenced by id. Returns 
		the animation id upon success. Returns -1 upon failure. This might be used 
		while authoring effects if there was a change necessitating re-opening 
		the animation. The animation id can no longer be used once closed.
	*/
	static int LuaCloseAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCloseAnimationD(lua::lua_State* state);
	/*
	Closes the `Chroma` animation referenced by name so that the animation can 
		be reloaded from disk.
	*/
	static int LuaCloseAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCloseAnimationNameD(lua::lua_State* state);
	/*
	`PluginCloseComposite` closes a set of animations so they can be reloaded 
		from disk. The set of animations will be stopped if playing.
	*/
	static int LuaCloseComposite(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCloseCompositeD(lua::lua_State* state);
	/*
	Copy animation to named target animation in memory. If target animation 
		exists, close first. Source is referenced by id.
	*/
	static int LuaCopyAnimation(lua::lua_State* state);
	/*
	Copy animation to named target animation in memory. If target animation 
		exists, close first. Source is referenced by name.
	*/
	static int LuaCopyAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyAnimationNameD(lua::lua_State* state);
	/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0 
		to 1.0. Reference the animation by id.
	*/
	static int LuaCopyBlueChannelAllFrames(lua::lua_State* state);
	/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0 
		to 1.0. Reference the animation by name.
	*/
	static int LuaCopyBlueChannelAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyBlueChannelAllFramesNameD(lua::lua_State* state);
	/*
	Copy green channel to other channels for all frames. Intensity range is 
		0.0 to 1.0. Reference the animation by id.
	*/
	static int LuaCopyGreenChannelAllFrames(lua::lua_State* state);
	/*
	Copy green channel to other channels for all frames. Intensity range is 
		0.0 to 1.0. Reference the animation by name.
	*/
	static int LuaCopyGreenChannelAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyGreenChannelAllFramesNameD(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for the given frame. Reference the source and target by id.
	*/
	static int LuaCopyKeyColor(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for all frames. Reference the source and target by id.
	*/
	static int LuaCopyKeyColorAllFrames(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for all frames. Reference the source and target by name.
	*/
	static int LuaCopyKeyColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyKeyColorAllFramesNameD(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for all frames, starting at the offset for the length of the source animation. 
		Source and target are referenced by id.
	*/
	static int LuaCopyKeyColorAllFramesOffset(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for all frames, starting at the offset for the length of the source animation. 
		Source and target are referenced by name.
	*/
	static int LuaCopyKeyColorAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyKeyColorAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for the given frame.
	*/
	static int LuaCopyKeyColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyKeyColorNameD(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation for the given frame. Reference the source and target by 
		id.
	*/
	static int LuaCopyKeysColor(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation for all frames. Reference the source and target by id.
	*/
	static int LuaCopyKeysColorAllFrames(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation for all frames. Reference the source and target by name.
	*/
	static int LuaCopyKeysColorAllFramesName(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation for the given frame. Reference the source and target by 
		name.
	*/
	static int LuaCopyKeysColorName(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation from the source frame to the target frame. Reference the 
		source and target by id.
	*/
	static int LuaCopyKeysColorOffset(lua::lua_State* state);
	/*
	Copy animation color for a set of keys from the source animation to the 
		target animation from the source frame to the target frame. Reference the 
		source and target by name.
	*/
	static int LuaCopyKeysColorOffsetName(lua::lua_State* state);
	/*
	Copy source animation to target animation for the given frame. Source and 
		target are referenced by id.
	*/
	static int LuaCopyNonZeroAllKeys(lua::lua_State* state);
	/*
	Copy nonzero colors from a source animation to a target animation for all 
		frames. Reference source and target by id.
	*/
	static int LuaCopyNonZeroAllKeysAllFrames(lua::lua_State* state);
	/*
	Copy nonzero colors from a source animation to a target animation for all 
		frames. Reference source and target by name.
	*/
	static int LuaCopyNonZeroAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from a source animation to a target animation for all 
		frames starting at the offset for the length of the source animation. The 
		source and target are referenced by id.
	*/
	static int LuaCopyNonZeroAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Copy nonzero colors from a source animation to a target animation for all 
		frames starting at the offset for the length of the source animation. The 
		source and target are referenced by name.
	*/
	static int LuaCopyNonZeroAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from source animation to target animation for the specified 
		frame. Source and target are referenced by id.
	*/
	static int LuaCopyNonZeroAllKeysName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroAllKeysNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation from 
		the source frame to the target offset frame. Source and target are referenced 
		by id.
	*/
	static int LuaCopyNonZeroAllKeysOffset(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation from 
		the source frame to the target offset frame. Source and target are referenced 
		by name.
	*/
	static int LuaCopyNonZeroAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for the given frame where color is not zero.
	*/
	static int LuaCopyNonZeroKeyColor(lua::lua_State* state);
	/*
	Copy animation key color from the source animation to the target animation 
		for the given frame where color is not zero.
	*/
	static int LuaCopyNonZeroKeyColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroKeyColorNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for the specified frame. Source and target 
		are referenced by id.
	*/
	static int LuaCopyNonZeroTargetAllKeys(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for all frames. Source and target are referenced 
		by id.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFrames(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for all frames. Source and target are referenced 
		by name.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for all frames. Source and target are referenced 
		by name.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for all frames starting at the target offset 
		for the length of the source animation. Source and target animations are 
		referenced by name.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroTargetAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for the specified frame. The source and target 
		are referenced by name.
	*/
	static int LuaCopyNonZeroTargetAllKeysName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroTargetAllKeysNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for the specified source frame and target offset 
		frame. The source and target are referenced by id.
	*/
	static int LuaCopyNonZeroTargetAllKeysOffset(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is nonzero for the specified source frame and target offset 
		frame. The source and target are referenced by name.
	*/
	static int LuaCopyNonZeroTargetAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroTargetAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is zero for all frames. Source and target are referenced 
		by id.
	*/
	static int LuaCopyNonZeroTargetZeroAllKeysAllFrames(lua::lua_State* state);
	/*
	Copy nonzero colors from the source animation to the target animation where 
		the target color is zero for all frames. Source and target are referenced 
		by name.
	*/
	static int LuaCopyNonZeroTargetZeroAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyNonZeroTargetZeroAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Copy red channel to other channels for all frames. Intensity range is 0.0 
		to 1.0. Reference the animation by id.
	*/
	static int LuaCopyRedChannelAllFrames(lua::lua_State* state);
	/*
	Copy green channel to other channels for all frames. Intensity range is 
		0.0 to 1.0. Reference the animation by name.
	*/
	static int LuaCopyRedChannelAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyRedChannelAllFramesNameD(lua::lua_State* state);
	/*
	Copy zero colors from source animation to target animation for all frames. 
		Source and target are referenced by id.
	*/
	static int LuaCopyZeroAllKeysAllFrames(lua::lua_State* state);
	/*
	Copy zero colors from source animation to target animation for all frames. 
		Source and target are referenced by name.
	*/
	static int LuaCopyZeroAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyZeroAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Copy zero colors from source animation to target animation for all frames 
		starting at the target offset for the length of the source animation. Source 
		and target are referenced by id.
	*/
	static int LuaCopyZeroAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Copy zero colors from source animation to target animation for all frames 
		starting at the target offset for the length of the source animation. Source 
		and target are referenced by name.
	*/
	static int LuaCopyZeroAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyZeroAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Copy zero key color from source animation to target animation for the specified 
		frame. Source and target are referenced by id.
	*/
	static int LuaCopyZeroKeyColor(lua::lua_State* state);
	/*
	Copy zero key color from source animation to target animation for the specified 
		frame. Source and target are referenced by name.
	*/
	static int LuaCopyZeroKeyColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyZeroKeyColorNameD(lua::lua_State* state);
	/*
	Copy nonzero color from source animation to target animation where target 
		is zero for all frames. Source and target are referenced by id.
	*/
	static int LuaCopyZeroTargetAllKeysAllFrames(lua::lua_State* state);
	/*
	Copy nonzero color from source animation to target animation where target 
		is zero for all frames. Source and target are referenced by name.
	*/
	static int LuaCopyZeroTargetAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaCopyZeroTargetAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateChromaLinkEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateHeadsetEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateKeyboardEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateKeypadEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateMouseEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreCreateMousepadEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreDeleteEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreInit(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreInitSDK(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreQueryDevice(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreSetEffect(lua::lua_State* state);
	/*
	Direct access to low level API.
	*/
	static int LuaCoreUnInit(lua::lua_State* state);
	/*
	Creates a `Chroma` animation at the given path. The `deviceType` parameter 
		uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter uses 
		`EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, respective 
		to the `deviceType`. Returns the animation id upon success. Returns -1 
		upon failure. Saves a `Chroma` animation file with the `.chroma` extension 
		at the given path. Returns the animation id upon success. Returns -1 upon 
		failure.
	*/
	static int LuaCreateAnimation(lua::lua_State* state);
	/*
	Creates a `Chroma` animation in memory without creating a file. The `deviceType` 
		parameter uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter 
		uses `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, 
		respective to the `deviceType`. Returns the animation id upon success. 
		Returns -1 upon failure. Returns the animation id upon success. Returns 
		-1 upon failure.
	*/
	static int LuaCreateAnimationInMemory(lua::lua_State* state);
	/*
	Create a device specific effect.
	*/
	static int LuaCreateEffect(lua::lua_State* state);
	/*
	Delete an effect given the effect id.
	*/
	static int LuaDeleteEffect(lua::lua_State* state);
	/*
	Duplicate the first animation frame so that the animation length matches 
		the frame count. Animation is referenced by id.
	*/
	static int LuaDuplicateFirstFrame(lua::lua_State* state);
	/*
	Duplicate the first animation frame so that the animation length matches 
		the frame count. Animation is referenced by name.
	*/
	static int LuaDuplicateFirstFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaDuplicateFirstFrameNameD(lua::lua_State* state);
	/*
	Duplicate all the frames of the animation to double the animation length. 
		Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on. 
		The animation is referenced by id.
	*/
	static int LuaDuplicateFrames(lua::lua_State* state);
	/*
	Duplicate all the frames of the animation to double the animation length. 
		Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on. 
		The animation is referenced by name.
	*/
	static int LuaDuplicateFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaDuplicateFramesNameD(lua::lua_State* state);
	/*
	Duplicate all the animation frames in reverse so that the animation plays 
		forwards and backwards. Animation is referenced by id.
	*/
	static int LuaDuplicateMirrorFrames(lua::lua_State* state);
	/*
	Duplicate all the animation frames in reverse so that the animation plays 
		forwards and backwards. Animation is referenced by name.
	*/
	static int LuaDuplicateMirrorFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaDuplicateMirrorFramesNameD(lua::lua_State* state);
	/*
	Fade the animation to black starting at the fade frame index to the end 
		of the animation. Animation is referenced by id.
	*/
	static int LuaFadeEndFrames(lua::lua_State* state);
	/*
	Fade the animation to black starting at the fade frame index to the end 
		of the animation. Animation is referenced by name.
	*/
	static int LuaFadeEndFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFadeEndFramesNameD(lua::lua_State* state);
	/*
	Fade the animation from black to full color starting at 0 to the fade frame 
		index. Animation is referenced by id.
	*/
	static int LuaFadeStartFrames(lua::lua_State* state);
	/*
	Fade the animation from black to full color starting at 0 to the fade frame 
		index. Animation is referenced by name.
	*/
	static int LuaFadeStartFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFadeStartFramesNameD(lua::lua_State* state);
	/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
		by id.
	*/
	static int LuaFillColor(lua::lua_State* state);
	/*
	Set the RGB value for all colors for all frames. Animation is referenced 
		by id.
	*/
	static int LuaFillColorAllFrames(lua::lua_State* state);
	/*
	Set the RGB value for all colors for all frames. Animation is referenced 
		by name.
	*/
	static int LuaFillColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillColorAllFramesNameD(lua::lua_State* state);
	/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255 
		for red, green, and blue parameters. Animation is referenced by id.
	*/
	static int LuaFillColorAllFramesRGB(lua::lua_State* state);
	/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255 
		for red, green, and blue parameters. Animation is referenced by name.
	*/
	static int LuaFillColorAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillColorAllFramesRGBNameD(lua::lua_State* state);
	/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
		by name.
	*/
	static int LuaFillColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillColorNameD(lua::lua_State* state);
	/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
		by id.
	*/
	static int LuaFillColorRGB(lua::lua_State* state);
	/*
	Set the RGB value for all colors in the specified frame. Animation is referenced 
		by name.
	*/
	static int LuaFillColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillColorRGBNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors in the specified 
		frame. Animation is referenced by id.
	*/
	static int LuaFillNonZeroColor(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors for all frames. 
		Animation is referenced by id.
	*/
	static int LuaFillNonZeroColorAllFrames(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors for all frames. 
		Animation is referenced by name.
	*/
	static int LuaFillNonZeroColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillNonZeroColorAllFramesNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors for all frames. 
		Use the range of 0 to 255 for red, green, and blue parameters. Animation 
		is referenced by id.
	*/
	static int LuaFillNonZeroColorAllFramesRGB(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors for all frames. 
		Use the range of 0 to 255 for red, green, and blue parameters. Animation 
		is referenced by name.
	*/
	static int LuaFillNonZeroColorAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillNonZeroColorAllFramesRGBNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors in the specified 
		frame. Animation is referenced by name.
	*/
	static int LuaFillNonZeroColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillNonZeroColorNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors in the specified 
		frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation 
		is referenced by id.
	*/
	static int LuaFillNonZeroColorRGB(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Set the RGB value for a subset of colors in the specified 
		frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation 
		is referenced by name.
	*/
	static int LuaFillNonZeroColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillNonZeroColorRGBNameD(lua::lua_State* state);
	/*
	Fill the frame with random RGB values for the given frame. Animation is 
		referenced by id.
	*/
	static int LuaFillRandomColors(lua::lua_State* state);
	/*
	Fill the frame with random RGB values for all frames. Animation is referenced 
		by id.
	*/
	static int LuaFillRandomColorsAllFrames(lua::lua_State* state);
	/*
	Fill the frame with random RGB values for all frames. Animation is referenced 
		by name.
	*/
	static int LuaFillRandomColorsAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillRandomColorsAllFramesNameD(lua::lua_State* state);
	/*
	Fill the frame with random black and white values for the specified frame. 
		Animation is referenced by id.
	*/
	static int LuaFillRandomColorsBlackAndWhite(lua::lua_State* state);
	/*
	Fill the frame with random black and white values for all frames. Animation 
		is referenced by id.
	*/
	static int LuaFillRandomColorsBlackAndWhiteAllFrames(lua::lua_State* state);
	/*
	Fill the frame with random black and white values for all frames. Animation 
		is referenced by name.
	*/
	static int LuaFillRandomColorsBlackAndWhiteAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillRandomColorsBlackAndWhiteAllFramesNameD(lua::lua_State* state);
	/*
	Fill the frame with random black and white values for the specified frame. 
		Animation is referenced by name.
	*/
	static int LuaFillRandomColorsBlackAndWhiteName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillRandomColorsBlackAndWhiteNameD(lua::lua_State* state);
	/*
	Fill the frame with random RGB values for the given frame. Animation is 
		referenced by name.
	*/
	static int LuaFillRandomColorsName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillRandomColorsNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColors(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		RGB threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColorsAllFrames(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		RGB threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsAllFramesNameD(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColorsAllFramesRGB(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsAllFramesRGBNameD(lua::lua_State* state);
	/*
	Fill all frames with the min RGB color where the animation color is less 
		than the min threshold AND with the max RGB color where the animation is 
		more than the max threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColorsMinMaxAllFramesRGB(lua::lua_State* state);
	/*
	Fill all frames with the min RGB color where the animation color is less 
		than the min threshold AND with the max RGB color where the animation is 
		more than the max threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsMinMaxAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsMinMaxAllFramesRGBNameD(lua::lua_State* state);
	/*
	Fill the specified frame with the min RGB color where the animation color 
		is less than the min threshold AND with the max RGB color where the animation 
		is more than the max threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColorsMinMaxRGB(lua::lua_State* state);
	/*
	Fill the specified frame with the min RGB color where the animation color 
		is less than the min threshold AND with the max RGB color where the animation 
		is more than the max threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsMinMaxRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsMinMaxRGBNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdColorsRGB(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdColorsRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdColorsRGBNameD(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		RGB threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdRGBColorsAllFramesRGB(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is less than the 
		RGB threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdRGBColorsAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdRGBColorsAllFramesRGBNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by id.
	*/
	static int LuaFillThresholdRGBColorsRGB(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is less 
		than the RGB threshold. Animation is referenced by name.
	*/
	static int LuaFillThresholdRGBColorsRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillThresholdRGBColorsRGBNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is zero. 
		Animation is referenced by id.
	*/
	static int LuaFillZeroColor(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is zero. Animation 
		is referenced by id.
	*/
	static int LuaFillZeroColorAllFrames(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is zero. Animation 
		is referenced by name.
	*/
	static int LuaFillZeroColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillZeroColorAllFramesNameD(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is zero. Animation 
		is referenced by id.
	*/
	static int LuaFillZeroColorAllFramesRGB(lua::lua_State* state);
	/*
	Fill all frames with RGB color where the animation color is zero. Animation 
		is referenced by name.
	*/
	static int LuaFillZeroColorAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillZeroColorAllFramesRGBNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is zero. 
		Animation is referenced by name.
	*/
	static int LuaFillZeroColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillZeroColorNameD(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is zero. 
		Animation is referenced by id.
	*/
	static int LuaFillZeroColorRGB(lua::lua_State* state);
	/*
	Fill the specified frame with RGB color where the animation color is zero. 
		Animation is referenced by name.
	*/
	static int LuaFillZeroColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaFillZeroColorRGBNameD(lua::lua_State* state);
	/*
	Get the animation color for a frame given the `1D` `led`. The `led` should 
		be greater than or equal to 0 and less than the `MaxLeds`. Animation is 
		referenced by id.
	*/
	static int LuaGet1DColor(lua::lua_State* state);
	/*
	Get the animation color for a frame given the `1D` `led`. The `led` should 
		be greater than or equal to 0 and less than the `MaxLeds`. Animation is 
		referenced by name.
	*/
	static int LuaGet1DColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGet1DColorNameD(lua::lua_State* state);
	/*
	Get the animation color for a frame given the `2D` `row` and `column`. The 
		`row` should be greater than or equal to 0 and less than the `MaxRow`. 
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
		Animation is referenced by id.
	*/
	static int LuaGet2DColor(lua::lua_State* state);
	/*
	Get the animation color for a frame given the `2D` `row` and `column`. The 
		`row` should be greater than or equal to 0 and less than the `MaxRow`. 
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
		Animation is referenced by name.
	*/
	static int LuaGet2DColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGet2DColorNameD(lua::lua_State* state);
	/*
	Get the animation id for the named animation.
	*/
	static int LuaGetAnimation(lua::lua_State* state);
	/*
	`PluginGetAnimationCount` will return the number of loaded animations.
	*/
	static int LuaGetAnimationCount(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetAnimationD(lua::lua_State* state);
	/*
	`PluginGetAnimationId` will return the `animationId` given the `index` of 
		the loaded animation. The `index` is zero-based and less than the number 
		returned by `PluginGetAnimationCount`. Use `PluginGetAnimationName` to 
		get the name of the animation.
	*/
	static int LuaGetAnimationId(lua::lua_State* state);
	/*
	`PluginGetAnimationName` takes an `animationId` and returns the name of 
		the animation of the `.chroma` animation file. If a name is not available 
		then an empty string will be returned.
	*/
	static int LuaGetAnimationName(lua::lua_State* state);
	/*
	Get the current frame of the animation referenced by id.
	*/
	static int LuaGetCurrentFrame(lua::lua_State* state);
	/*
	Get the current frame of the animation referenced by name.
	*/
	static int LuaGetCurrentFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetCurrentFrameNameD(lua::lua_State* state);
	/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma` 
		animation respective to the `deviceType`, as an integer upon success. Returns 
		-1 upon failure.
	*/
	static int LuaGetDevice(lua::lua_State* state);
	/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma` 
		animation respective to the `deviceType`, as an integer upon success. Returns 
		-1 upon failure.
	*/
	static int LuaGetDeviceName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetDeviceNameD(lua::lua_State* state);
	/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer 
		upon success. Returns -1 upon failure.
	*/
	static int LuaGetDeviceType(lua::lua_State* state);
	/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer 
		upon success. Returns -1 upon failure.
	*/
	static int LuaGetDeviceTypeName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetDeviceTypeNameD(lua::lua_State* state);
	/*
	Gets the frame colors and duration (in seconds) for a `Chroma` animation. 
		The `color` is expected to be an array of the expected dimensions for the 
		`deviceType/device`. The `length` parameter is the size of the `color` 
		array. For `EChromaSDKDevice1DEnum` the array size should be `MAX LEDS`. 
		For `EChromaSDKDevice2DEnum` the array size should be `MAX ROW` * `MAX 
		COLUMN`. Returns the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaGetFrame(lua::lua_State* state);
	/*
	Returns the frame count of a `Chroma` animation upon success. Returns -1 
		upon failure.
	*/
	static int LuaGetFrameCount(lua::lua_State* state);
	/*
	Returns the frame count of a `Chroma` animation upon success. Returns -1 
		upon failure.
	*/
	static int LuaGetFrameCountName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetFrameCountNameD(lua::lua_State* state);
	/*
	Get the color of an animation key for the given frame referenced by id.
	*/
	static int LuaGetKeyColor(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetKeyColorD(lua::lua_State* state);
	/*
	Get the color of an animation key for the given frame referenced by name.
	*/
	static int LuaGetKeyColorName(lua::lua_State* state);
	/*
	Returns `RZRESULT_SUCCESS` if the plugin has been initialized successfully. 
		Returns `RZRESULT_DLL_NOT_FOUND` if core Chroma library is not found. Returns 
		`RZRESULT_DLL_INVALID_SIGNATURE` if core Chroma library has an invalid 
		signature.
	*/
	static int LuaGetLibraryLoadedState(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetLibraryLoadedStateD(lua::lua_State* state);
	/*
	Returns the `MAX COLUMN` given the `EChromaSDKDevice2DEnum` device as an 
		integer upon success. Returns -1 upon failure.
	*/
	static int LuaGetMaxColumn(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetMaxColumnD(lua::lua_State* state);
	/*
	Returns the MAX LEDS given the `EChromaSDKDevice1DEnum` device as an integer 
		upon success. Returns -1 upon failure.
	*/
	static int LuaGetMaxLeds(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetMaxLedsD(lua::lua_State* state);
	/*
	Returns the `MAX ROW` given the `EChromaSDKDevice2DEnum` device as an integer 
		upon success. Returns -1 upon failure.
	*/
	static int LuaGetMaxRow(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetMaxRowD(lua::lua_State* state);
	/*
	`PluginGetPlayingAnimationCount` will return the number of playing animations.
	*/
	static int LuaGetPlayingAnimationCount(lua::lua_State* state);
	/*
	`PluginGetPlayingAnimationId` will return the `animationId` given the `index` 
		of the playing animation. The `index` is zero-based and less than the number 
		returned by `PluginGetPlayingAnimationCount`. Use `PluginGetAnimationName` 
		to get the name of the animation.
	*/
	static int LuaGetPlayingAnimationId(lua::lua_State* state);
	/*
	Get the RGB color given red, green, and blue.
	*/
	static int LuaGetRGB(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaGetRGBD(lua::lua_State* state);
	/*
	Check if the animation has loop enabled referenced by id.
	*/
	static int LuaHasAnimationLoop(lua::lua_State* state);
	/*
	Check if the animation has loop enabled referenced by name.
	*/
	static int LuaHasAnimationLoopName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaHasAnimationLoopNameD(lua::lua_State* state);
	/*
	Initialize the ChromaSDK. Zero indicates  success, otherwise failure. Many 
		API methods auto initialize the ChromaSDK if not already initialized.
	*/
	static int LuaInit(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaInitD(lua::lua_State* state);
	/*
	Initialize the ChromaSDK. AppInfo populates the details in Synapse. Zero 
		indicates  success, otherwise failure. Many API methods auto initialize 
		the ChromaSDK if not already initialized.
	*/
	static int LuaInitSDK(lua::lua_State* state);
	/*
	Insert an animation delay by duplicating the frame by the delay number of 
		times. Animation is referenced by id.
	*/
	static int LuaInsertDelay(lua::lua_State* state);
	/*
	Insert an animation delay by duplicating the frame by the delay number of 
		times. Animation is referenced by name.
	*/
	static int LuaInsertDelayName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaInsertDelayNameD(lua::lua_State* state);
	/*
	Duplicate the source frame index at the target frame index. Animation is 
		referenced by id.
	*/
	static int LuaInsertFrame(lua::lua_State* state);
	/*
	Duplicate the source frame index at the target frame index. Animation is 
		referenced by name.
	*/
	static int LuaInsertFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaInsertFrameNameD(lua::lua_State* state);
	/*
	Invert all the colors at the specified frame. Animation is referenced by 
		id.
	*/
	static int LuaInvertColors(lua::lua_State* state);
	/*
	Invert all the colors for all frames. Animation is referenced by id.
	*/
	static int LuaInvertColorsAllFrames(lua::lua_State* state);
	/*
	Invert all the colors for all frames. Animation is referenced by name.
	*/
	static int LuaInvertColorsAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaInvertColorsAllFramesNameD(lua::lua_State* state);
	/*
	Invert all the colors at the specified frame. Animation is referenced by 
		name.
	*/
	static int LuaInvertColorsName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaInvertColorsNameD(lua::lua_State* state);
	/*
	Check if the animation is paused referenced by id.
	*/
	static int LuaIsAnimationPaused(lua::lua_State* state);
	/*
	Check if the animation is paused referenced by name.
	*/
	static int LuaIsAnimationPausedName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsAnimationPausedNameD(lua::lua_State* state);
	/*
	The editor dialog is a non-blocking modal window, this method returns true 
		if the modal window is open, otherwise false.
	*/
	static int LuaIsDialogOpen(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsDialogOpenD(lua::lua_State* state);
	/*
	Returns true if the plugin has been initialized. Returns false if the plugin 
		is uninitialized.
	*/
	static int LuaIsInitialized(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsInitializedD(lua::lua_State* state);
	/*
	If the method can be invoked the method returns true.
	*/
	static int LuaIsPlatformSupported(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsPlatformSupportedD(lua::lua_State* state);
	/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`. 
		The named `.chroma` animation file will be automatically opened. The method 
		will return whether the animation is playing or not. Animation is referenced 
		by id.
	*/
	static int LuaIsPlaying(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsPlayingD(lua::lua_State* state);
	/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`. 
		The named `.chroma` animation file will be automatically opened. The method 
		will return whether the animation is playing or not. Animation is referenced 
		by name.
	*/
	static int LuaIsPlayingName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsPlayingNameD(lua::lua_State* state);
	/*
	`PluginIsPlayingType` automatically handles initializing the `ChromaSDK`. 
		If any animation is playing for the `deviceType` and `device` combination, 
		the method will return true, otherwise false.
	*/
	static int LuaIsPlayingType(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaIsPlayingTypeD(lua::lua_State* state);
	/*
	Do a lerp math operation on a float.
	*/
	static int LuaLerp(lua::lua_State* state);
	/*
	Lerp from one color to another given t in the range 0.0 to 1.0.
	*/
	static int LuaLerpColor(lua::lua_State* state);
	/*
	Loads `Chroma` effects so that the animation can be played immediately. 
		Returns the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaLoadAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaLoadAnimationD(lua::lua_State* state);
	/*
	Load the named animation.
	*/
	static int LuaLoadAnimationName(lua::lua_State* state);
	/*
	Load a composite set of animations.
	*/
	static int LuaLoadComposite(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color defaults to color. Animation 
		is referenced by id.
	*/
	static int LuaMakeBlankFrames(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color defaults to color. Animation 
		is referenced by name.
	*/
	static int LuaMakeBlankFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMakeBlankFramesNameD(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color is random. Animation is referenced 
		by id.
	*/
	static int LuaMakeBlankFramesRandom(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color is random black and white. Animation 
		is referenced by id.
	*/
	static int LuaMakeBlankFramesRandomBlackAndWhite(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color is random black and white. Animation 
		is referenced by name.
	*/
	static int LuaMakeBlankFramesRandomBlackAndWhiteName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMakeBlankFramesRandomBlackAndWhiteNameD(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color is random. Animation is referenced 
		by name.
	*/
	static int LuaMakeBlankFramesRandomName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMakeBlankFramesRandomNameD(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color defaults to color. Animation 
		is referenced by id.
	*/
	static int LuaMakeBlankFramesRGB(lua::lua_State* state);
	/*
	Make a blank animation for the length of the frame count. Frame duration 
		defaults to the duration. The frame color defaults to color. Animation 
		is referenced by name.
	*/
	static int LuaMakeBlankFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMakeBlankFramesRGBNameD(lua::lua_State* state);
	/*
	Flips the color grid horizontally for all `Chroma` animation frames. Returns 
		the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaMirrorHorizontally(lua::lua_State* state);
	/*
	Flips the color grid vertically for all `Chroma` animation frames. This 
		method has no effect for `EChromaSDKDevice1DEnum` devices. Returns the 
		animation id upon success. Returns -1 upon failure.
	*/
	static int LuaMirrorVertically(lua::lua_State* state);
	/*
	Multiply the color intensity with the lerp result from color 1 to color 
		2 using the frame index divided by the frame count for the `t` parameter. 
		Animation is referenced in id.
	*/
	static int LuaMultiplyColorLerpAllFrames(lua::lua_State* state);
	/*
	Multiply the color intensity with the lerp result from color 1 to color 
		2 using the frame index divided by the frame count for the `t` parameter. 
		Animation is referenced in name.
	*/
	static int LuaMultiplyColorLerpAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyColorLerpAllFramesNameD(lua::lua_State* state);
	/*
	Multiply all the colors in the frame by the intensity value. The valid the 
		intensity range is from 0.0 to 255.0. RGB components are multiplied equally. 
		An intensity of 0.5 would half the color value. Black colors in the frame 
		will not be affected by this method.
	*/
	static int LuaMultiplyIntensity(lua::lua_State* state);
	/*
	Multiply all the colors for all frames by the intensity value. The valid 
		the intensity range is from 0.0 to 255.0. RGB components are multiplied 
		equally. An intensity of 0.5 would half the color value. Black colors in 
		the frame will not be affected by this method.
	*/
	static int LuaMultiplyIntensityAllFrames(lua::lua_State* state);
	/*
	Multiply all the colors for all frames by the intensity value. The valid 
		the intensity range is from 0.0 to 255.0. RGB components are multiplied 
		equally. An intensity of 0.5 would half the color value. Black colors in 
		the frame will not be affected by this method.
	*/
	static int LuaMultiplyIntensityAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityAllFramesNameD(lua::lua_State* state);
	/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyIntensityAllFramesRGB(lua::lua_State* state);
	/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
		by name.
	*/
	static int LuaMultiplyIntensityAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityAllFramesRGBNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyIntensityColor(lua::lua_State* state);
	/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyIntensityColorAllFrames(lua::lua_State* state);
	/*
	Multiply all frames by the RBG color intensity. Animation is referenced 
		by name.
	*/
	static int LuaMultiplyIntensityColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityColorAllFramesNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
		by name.
	*/
	static int LuaMultiplyIntensityColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityColorNameD(lua::lua_State* state);
	/*
	Multiply all the colors in the frame by the intensity value. The valid the 
		intensity range is from 0.0 to 255.0. RGB components are multiplied equally. 
		An intensity of 0.5 would half the color value. Black colors in the frame 
		will not be affected by this method.
	*/
	static int LuaMultiplyIntensityName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyIntensityRGB(lua::lua_State* state);
	/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced 
		by name.
	*/
	static int LuaMultiplyIntensityRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyIntensityRGBNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the color lerp result between color 1 and 
		2 using the frame color value as the `t` value. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyNonZeroTargetColorLerp(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
		the frame color value as the `t` value. Animation is referenced by id.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFrames(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
		the frame color value as the `t` value. Animation is referenced by name.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFramesNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2 
		using the frame color value as the `t` value. Animation is referenced by 
		id.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFramesRGB(lua::lua_State* state);
	/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2 
		using the frame color value as the `t` value. Animation is referenced by 
		name.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyNonZeroTargetColorLerpAllFramesRGBNameD(lua::lua_State* state);
	/*
	Multiply the specific frame by the color lerp result between color 1 and 
		2 using the frame color value as the `t` value. Animation is referenced 
		by id.
	*/
	static int LuaMultiplyTargetColorLerp(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
		the frame color value as the `t` value. Animation is referenced by id.
	*/
	static int LuaMultiplyTargetColorLerpAllFrames(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between color 1 and 2 using 
		the frame color value as the `t` value. Animation is referenced by name.
	*/
	static int LuaMultiplyTargetColorLerpAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyTargetColorLerpAllFramesNameD(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the 
		frame color value as the `t` value. Animation is referenced by id.
	*/
	static int LuaMultiplyTargetColorLerpAllFramesRGB(lua::lua_State* state);
	/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the 
		frame color value as the `t` value. Animation is referenced by name.
	*/
	static int LuaMultiplyTargetColorLerpAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaMultiplyTargetColorLerpAllFramesRGBNameD(lua::lua_State* state);
	/*
	Offset all colors in the frame using the RGB offset. Use the range of -255 
		to 255 for red, green, and blue parameters. Negative values remove color. 
		Positive values add color.
	*/
	static int LuaOffsetColors(lua::lua_State* state);
	/*
	Offset all colors for all frames using the RGB offset. Use the range of 
		-255 to 255 for red, green, and blue parameters. Negative values remove 
		color. Positive values add color.
	*/
	static int LuaOffsetColorsAllFrames(lua::lua_State* state);
	/*
	Offset all colors for all frames using the RGB offset. Use the range of 
		-255 to 255 for red, green, and blue parameters. Negative values remove 
		color. Positive values add color.
	*/
	static int LuaOffsetColorsAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOffsetColorsAllFramesNameD(lua::lua_State* state);
	/*
	Offset all colors in the frame using the RGB offset. Use the range of -255 
		to 255 for red, green, and blue parameters. Negative values remove color. 
		Positive values add color.
	*/
	static int LuaOffsetColorsName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOffsetColorsNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Offset a subset of colors in the frame using the RGB offset. 
		Use the range of -255 to 255 for red, green, and blue parameters. Negative 
		values remove color. Positive values add color.
	*/
	static int LuaOffsetNonZeroColors(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Offset a subset of colors for all frames using the RGB offset. 
		Use the range of -255 to 255 for red, green, and blue parameters. Negative 
		values remove color. Positive values add color.
	*/
	static int LuaOffsetNonZeroColorsAllFrames(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Offset a subset of colors for all frames using the RGB offset. 
		Use the range of -255 to 255 for red, green, and blue parameters. Negative 
		values remove color. Positive values add color.
	*/
	static int LuaOffsetNonZeroColorsAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOffsetNonZeroColorsAllFramesNameD(lua::lua_State* state);
	/*
	This method will only update colors in the animation that are not already 
		set to black. Offset a subset of colors in the frame using the RGB offset. 
		Use the range of -255 to 255 for red, green, and blue parameters. Negative 
		values remove color. Positive values add color.
	*/
	static int LuaOffsetNonZeroColorsName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOffsetNonZeroColorsNameD(lua::lua_State* state);
	/*
	Opens a `Chroma` animation file so that it can be played. Returns an animation 
		id >= 0 upon success. Returns -1 if there was a failure. The animation 
		id is used in most of the API methods.
	*/
	static int LuaOpenAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOpenAnimationD(lua::lua_State* state);
	/*
	Opens a `Chroma` animation data from memory so that it can be played. `Data` 
		is a pointer to byte array of the loaded animation in memory. `Name` will 
		be assigned to the animation when loaded. Returns an animation id >= 0 
		upon success. Returns -1 if there was a failure. The animation id is used 
		in most of the API methods.
	*/
	static int LuaOpenAnimationFromMemory(lua::lua_State* state);
	/*
	Opens a `Chroma` animation file with the `.chroma` extension. Returns zero 
		upon success. Returns -1 if there was a failure.
	*/
	static int LuaOpenEditorDialog(lua::lua_State* state);
	/*
	Open the named animation in the editor dialog and play the animation at 
		start.
	*/
	static int LuaOpenEditorDialogAndPlay(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOpenEditorDialogAndPlayD(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOpenEditorDialogD(lua::lua_State* state);
	/*
	Sets the `duration` for all grames in the `Chroma` animation to the `duration` 
		parameter. Returns the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaOverrideFrameDuration(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaOverrideFrameDurationD(lua::lua_State* state);
	/*
	Override the duration of all frames with the `duration` value. Animation 
		is referenced by name.
	*/
	static int LuaOverrideFrameDurationName(lua::lua_State* state);
	/*
	Pause the current animation referenced by id.
	*/
	static int LuaPauseAnimation(lua::lua_State* state);
	/*
	Pause the current animation referenced by name.
	*/
	static int LuaPauseAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPauseAnimationNameD(lua::lua_State* state);
	/*
	Plays the `Chroma` animation. This will load the animation, if not loaded 
		previously. Returns the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaPlayAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPlayAnimationD(lua::lua_State* state);
	/*
	`PluginPlayAnimationFrame` automatically handles initializing the `ChromaSDK`. 
		The method will play the animation given the `animationId` with looping 
		`on` or `off` starting at the `frameId`.
	*/
	static int LuaPlayAnimationFrame(lua::lua_State* state);
	/*
	`PluginPlayAnimationFrameName` automatically handles initializing the `ChromaSDK`. 
		The named `.chroma` animation file will be automatically opened. The animation 
		will play with looping `on` or `off` starting at the `frameId`.
	*/
	static int LuaPlayAnimationFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPlayAnimationFrameNameD(lua::lua_State* state);
	/*
	`PluginPlayAnimationLoop` automatically handles initializing the `ChromaSDK`. 
		The method will play the animation given the `animationId` with looping 
		`on` or `off`.
	*/
	static int LuaPlayAnimationLoop(lua::lua_State* state);
	/*
	`PluginPlayAnimationName` automatically handles initializing the `ChromaSDK`. 
		The named `.chroma` animation file will be automatically opened. The animation 
		will play with looping `on` or `off`.
	*/
	static int LuaPlayAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPlayAnimationNameD(lua::lua_State* state);
	/*
	`PluginPlayComposite` automatically handles initializing the `ChromaSDK`. 
		The named animation files for the `.chroma` set will be automatically opened. 
		The set of animations will play with looping `on` or `off`.
	*/
	static int LuaPlayComposite(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPlayCompositeD(lua::lua_State* state);
	/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`. 
		Returns the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaPreviewFrame(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaPreviewFrameD(lua::lua_State* state);
	/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`. 
		Animaton is referenced by name.
	*/
	static int LuaPreviewFrameName(lua::lua_State* state);
	/*
	Reduce the frames of the animation by removing every nth element. Animation 
		is referenced by id.
	*/
	static int LuaReduceFrames(lua::lua_State* state);
	/*
	Reduce the frames of the animation by removing every nth element. Animation 
		is referenced by name.
	*/
	static int LuaReduceFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaReduceFramesNameD(lua::lua_State* state);
	/*
	Resets the `Chroma` animation to 1 blank frame. Returns the animation id 
		upon success. Returns -1 upon failure.
	*/
	static int LuaResetAnimation(lua::lua_State* state);
	/*
	Resume the animation with loop `ON` or `OFF` referenced by id.
	*/
	static int LuaResumeAnimation(lua::lua_State* state);
	/*
	Resume the animation with loop `ON` or `OFF` referenced by name.
	*/
	static int LuaResumeAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaResumeAnimationNameD(lua::lua_State* state);
	/*
	Reverse the animation frame order of the `Chroma` animation. Returns the 
		animation id upon success. Returns -1 upon failure. Animation is referenced 
		by id.
	*/
	static int LuaReverse(lua::lua_State* state);
	/*
	Reverse the animation frame order of the `Chroma` animation. Animation is 
		referenced by id.
	*/
	static int LuaReverseAllFrames(lua::lua_State* state);
	/*
	Reverse the animation frame order of the `Chroma` animation. Animation is 
		referenced by name.
	*/
	static int LuaReverseAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaReverseAllFramesNameD(lua::lua_State* state);
	/*
	Save the animation referenced by id to the path specified.
	*/
	static int LuaSaveAnimation(lua::lua_State* state);
	/*
	Save the named animation to the target path specified.
	*/
	static int LuaSaveAnimationName(lua::lua_State* state);
	/*
	Set the animation color for a frame given the `1D` `led`. The `led` should 
		be greater than or equal to 0 and less than the `MaxLeds`. The animation 
		is referenced by id.
	*/
	static int LuaSet1DColor(lua::lua_State* state);
	/*
	Set the animation color for a frame given the `1D` `led`. The `led` should 
		be greater than or equal to 0 and less than the `MaxLeds`. The animation 
		is referenced by name.
	*/
	static int LuaSet1DColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSet1DColorNameD(lua::lua_State* state);
	/*
	Set the animation color for a frame given the `2D` `row` and `column`. The 
		`row` should be greater than or equal to 0 and less than the `MaxRow`. 
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
		The animation is referenced by id.
	*/
	static int LuaSet2DColor(lua::lua_State* state);
	/*
	Set the animation color for a frame given the `2D` `row` and `column`. The 
		`row` should be greater than or equal to 0 and less than the `MaxRow`. 
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`. 
		The animation is referenced by name.
	*/
	static int LuaSet2DColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSet2DColorNameD(lua::lua_State* state);
	/*
	When custom color is set, the custom key mode will be used. The animation 
		is referenced by id.
	*/
	static int LuaSetChromaCustomColorAllFrames(lua::lua_State* state);
	/*
	When custom color is set, the custom key mode will be used. The animation 
		is referenced by name.
	*/
	static int LuaSetChromaCustomColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetChromaCustomColorAllFramesNameD(lua::lua_State* state);
	/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout 
		from grid to key. `True` changes the layout from key to grid. Animation 
		is referenced by id.
	*/
	static int LuaSetChromaCustomFlag(lua::lua_State* state);
	/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout 
		from grid to key. `True` changes the layout from key to grid. Animation 
		is referenced by name.
	*/
	static int LuaSetChromaCustomFlagName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetChromaCustomFlagNameD(lua::lua_State* state);
	/*
	Set the current frame of the animation referenced by id.
	*/
	static int LuaSetCurrentFrame(lua::lua_State* state);
	/*
	Set the current frame of the animation referenced by name.
	*/
	static int LuaSetCurrentFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetCurrentFrameNameD(lua::lua_State* state);
	/*
	Set the custom alpha flag on the color array
	*/
	static int LuaSetCustomColorFlag2D(lua::lua_State* state);
	/*
	Changes the `deviceType` and `device` of a `Chroma` animation. If the device 
		is changed, the `Chroma` animation will be reset with 1 blank frame. Returns 
		the animation id upon success. Returns -1 upon failure.
	*/
	static int LuaSetDevice(lua::lua_State* state);
	/*
	SetEffect will display the referenced effect id.
	*/
	static int LuaSetEffect(lua::lua_State* state);
	/*
	SetEffectCustom1D will display the referenced colors immediately
	*/
	static int LuaSetEffectCustom1D(lua::lua_State* state);
	/*
	SetEffectCustom2D will display the referenced colors immediately
	*/
	static int LuaSetEffectCustom2D(lua::lua_State* state);
	/*
	SetEffectKeyboardCustom2D will display the referenced custom keyboard colors 
		immediately
	*/
	static int LuaSetEffectKeyboardCustom2D(lua::lua_State* state);
	/*
	When the idle animation is used, the named animation will play when no other 
		animations are playing. Reference the animation by id.
	*/
	static int LuaSetIdleAnimation(lua::lua_State* state);
	/*
	When the idle animation is used, the named animation will play when no other 
		animations are playing. Reference the animation by name.
	*/
	static int LuaSetIdleAnimationName(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame.
	*/
	static int LuaSetKeyColor(lua::lua_State* state);
	/*
	Set the key to the specified key color for all frames. Animation is referenced 
		by id.
	*/
	static int LuaSetKeyColorAllFrames(lua::lua_State* state);
	/*
	Set the key to the specified key color for all frames. Animation is referenced 
		by name.
	*/
	static int LuaSetKeyColorAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyColorAllFramesNameD(lua::lua_State* state);
	/*
	Set the key to the specified key color for all frames. Animation is referenced 
		by id.
	*/
	static int LuaSetKeyColorAllFramesRGB(lua::lua_State* state);
	/*
	Set the key to the specified key color for all frames. Animation is referenced 
		by name.
	*/
	static int LuaSetKeyColorAllFramesRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyColorAllFramesRGBNameD(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame.
	*/
	static int LuaSetKeyColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyColorNameD(lua::lua_State* state);
	/*
	Set the key to the specified key color for the specified frame. Animation 
		is referenced by id.
	*/
	static int LuaSetKeyColorRGB(lua::lua_State* state);
	/*
	Set the key to the specified key color for the specified frame. Animation 
		is referenced by name.
	*/
	static int LuaSetKeyColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyColorRGBNameD(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame if the existing 
		color is not already black.
	*/
	static int LuaSetKeyNonZeroColor(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame if the existing 
		color is not already black.
	*/
	static int LuaSetKeyNonZeroColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyNonZeroColorNameD(lua::lua_State* state);
	/*
	Set the key to the specified key color for the specified frame where color 
		is not black. Animation is referenced by id.
	*/
	static int LuaSetKeyNonZeroColorRGB(lua::lua_State* state);
	/*
	Set the key to the specified key color for the specified frame where color 
		is not black. Animation is referenced by name.
	*/
	static int LuaSetKeyNonZeroColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyNonZeroColorRGBNameD(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame. Animation 
		is referenced by id.
	*/
	static int LuaSetKeysColor(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames. Animation 
		is referenced by id.
	*/
	static int LuaSetKeysColorAllFrames(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames. Animation 
		is referenced by name.
	*/
	static int LuaSetKeysColorAllFramesName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames. Animation 
		is referenced by id.
	*/
	static int LuaSetKeysColorAllFramesRGB(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames. Animation 
		is referenced by name.
	*/
	static int LuaSetKeysColorAllFramesRGBName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame.
	*/
	static int LuaSetKeysColorName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame. Animation 
		is referenced by id.
	*/
	static int LuaSetKeysColorRGB(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame. Animation 
		is referenced by name.
	*/
	static int LuaSetKeysColorRGBName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame if 
		the existing color is not already black.
	*/
	static int LuaSetKeysNonZeroColor(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is not black. Animation is referenced by id.
	*/
	static int LuaSetKeysNonZeroColorAllFrames(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames if the existing 
		color is not already black. Reference animation by name.
	*/
	static int LuaSetKeysNonZeroColorAllFramesName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame if 
		the existing color is not already black. Reference animation by name.
	*/
	static int LuaSetKeysNonZeroColorName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is not black. Animation is referenced by id.
	*/
	static int LuaSetKeysNonZeroColorRGB(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is not black. Animation is referenced by name.
	*/
	static int LuaSetKeysNonZeroColorRGBName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is black. Animation is referenced by id.
	*/
	static int LuaSetKeysZeroColor(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames where the 
		color is black. Animation is referenced by id.
	*/
	static int LuaSetKeysZeroColorAllFrames(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames where the 
		color is black. Animation is referenced by name.
	*/
	static int LuaSetKeysZeroColorAllFramesName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames where the 
		color is black. Animation is referenced by id.
	*/
	static int LuaSetKeysZeroColorAllFramesRGB(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for all frames where the 
		color is black. Animation is referenced by name.
	*/
	static int LuaSetKeysZeroColorAllFramesRGBName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is black. Animation is referenced by name.
	*/
	static int LuaSetKeysZeroColorName(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is black. Animation is referenced by id.
	*/
	static int LuaSetKeysZeroColorRGB(lua::lua_State* state);
	/*
	Set an array of animation keys to a static color for the given frame where 
		the color is black. Animation is referenced by name.
	*/
	static int LuaSetKeysZeroColorRGBName(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame where the color 
		is black. Animation is referenced by id.
	*/
	static int LuaSetKeyZeroColor(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame where the color 
		is black. Animation is referenced by name.
	*/
	static int LuaSetKeyZeroColorName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyZeroColorNameD(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame where the color 
		is black. Animation is referenced by id.
	*/
	static int LuaSetKeyZeroColorRGB(lua::lua_State* state);
	/*
	Set animation key to a static color for the given frame where the color 
		is black. Animation is referenced by name.
	*/
	static int LuaSetKeyZeroColorRGBName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSetKeyZeroColorRGBNameD(lua::lua_State* state);
	/*
	Invokes the setup for a debug logging callback so that `stdout` is redirected 
		to the callback. This is used by `Unity` so that debug messages can appear 
		in the console window.
	*/
	static int LuaSetLogDelegate(lua::lua_State* state);
	/*
	`PluginStaticColor` sets the target device to the static color.
	*/
	static int LuaStaticColor(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaStaticColorD(lua::lua_State* state);
	/*
	`PluginStopAll` will automatically stop all animations that are playing.
	*/
	static int LuaStopAll(lua::lua_State* state);
	/*
	Stops animation playback if in progress. Returns the animation id upon success. 
		Returns -1 upon failure.
	*/
	static int LuaStopAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaStopAnimationD(lua::lua_State* state);
	/*
	`PluginStopAnimationName` automatically handles initializing the `ChromaSDK`. 
		The named `.chroma` animation file will be automatically opened. The animation 
		will stop if playing.
	*/
	static int LuaStopAnimationName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaStopAnimationNameD(lua::lua_State* state);
	/*
	`PluginStopAnimationType` automatically handles initializing the `ChromaSDK`. 
		If any animation is playing for the `deviceType` and `device` combination, 
		it will be stopped.
	*/
	static int LuaStopAnimationType(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaStopAnimationTypeD(lua::lua_State* state);
	/*
	`PluginStopComposite` automatically handles initializing the `ChromaSDK`. 
		The named animation files for the `.chroma` set will be automatically opened. 
		The set of animations will be stopped if playing.
	*/
	static int LuaStopComposite(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaStopCompositeD(lua::lua_State* state);
	/*
	Subtract the source color from the target color for all frames where the 
		target color is not black. Source and target are referenced by id.
	*/
	static int LuaSubtractNonZeroAllKeysAllFrames(lua::lua_State* state);
	/*
	Subtract the source color from the target color for all frames where the 
		target color is not black. Source and target are referenced by name.
	*/
	static int LuaSubtractNonZeroAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Subtract the source color from the target color for all frames where the 
		target color is not black starting at offset for the length of the source. 
		Source and target are referenced by id.
	*/
	static int LuaSubtractNonZeroAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Subtract the source color from the target color for all frames where the 
		target color is not black starting at offset for the length of the source. 
		Source and target are referenced by name.
	*/
	static int LuaSubtractNonZeroAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Subtract the source color from the target where color is not black for the 
		source frame and target offset frame, reference source and target by id.
	*/
	static int LuaSubtractNonZeroAllKeysOffset(lua::lua_State* state);
	/*
	Subtract the source color from the target where color is not black for the 
		source frame and target offset frame, reference source and target by name.
	*/
	static int LuaSubtractNonZeroAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black for all frames. Reference source and target by id.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFrames(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black for all frames. Reference source and target by name.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFramesNameD(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black for all frames starting at the target offset for the length of 
		the source. Reference source and target by id.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFramesOffset(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black for all frames starting at the target offset for the length of 
		the source. Reference source and target by name.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFramesOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroTargetAllKeysAllFramesOffsetNameD(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black from the source frame to the target offset frame. Reference source 
		and target by id.
	*/
	static int LuaSubtractNonZeroTargetAllKeysOffset(lua::lua_State* state);
	/*
	Subtract the source color from the target color where the target color is 
		not black from the source frame to the target offset frame. Reference source 
		and target by name.
	*/
	static int LuaSubtractNonZeroTargetAllKeysOffsetName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaSubtractNonZeroTargetAllKeysOffsetNameD(lua::lua_State* state);
	/*
	Trim the end of the animation. The length of the animation will be the lastFrameId 
		+ 1. Reference the animation by id.
	*/
	static int LuaTrimEndFrames(lua::lua_State* state);
	/*
	Trim the end of the animation. The length of the animation will be the lastFrameId 
		+ 1. Reference the animation by name.
	*/
	static int LuaTrimEndFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaTrimEndFramesNameD(lua::lua_State* state);
	/*
	Remove the frame from the animation. Reference animation by id.
	*/
	static int LuaTrimFrame(lua::lua_State* state);
	/*
	Remove the frame from the animation. Reference animation by name.
	*/
	static int LuaTrimFrameName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaTrimFrameNameD(lua::lua_State* state);
	/*
	Trim the start of the animation starting at frame 0 for the number of frames. 
		Reference the animation by id.
	*/
	static int LuaTrimStartFrames(lua::lua_State* state);
	/*
	Trim the start of the animation starting at frame 0 for the number of frames. 
		Reference the animation by name.
	*/
	static int LuaTrimStartFramesName(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaTrimStartFramesNameD(lua::lua_State* state);
	/*
	Uninitializes the `ChromaSDK`. Returns 0 upon success. Returns -1 upon failure.
	*/
	static int LuaUninit(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaUninitD(lua::lua_State* state);
	/*
	Unloads `Chroma` effects to free up resources. Returns the animation id 
		upon success. Returns -1 upon failure. Reference the animation by id.
	*/
	static int LuaUnloadAnimation(lua::lua_State* state);
	/*
	D suffix for limited data types.
	*/
	static int LuaUnloadAnimationD(lua::lua_State* state);
	/*
	Unload the animation effects. Reference the animation by name.
	*/
	static int LuaUnloadAnimationName(lua::lua_State* state);
	/*
	Unload the the composite set of animation effects. Reference the animation 
		by name.
	*/
	static int LuaUnloadComposite(lua::lua_State* state);
	/*
	Updates the `frameIndex` of the `Chroma` animation and sets the `duration` 
		(in seconds). The `color` is expected to be an array of the dimensions 
		for the `deviceType/device`. The `length` parameter is the size of the 
		`color` array. For `EChromaSDKDevice1DEnum` the array size should be `MAX 
		LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX ROW` 
		* `MAX COLUMN`. Returns the animation id upon success. Returns -1 upon 
		failure.
	*/
	static int LuaUpdateFrame(lua::lua_State* state);
	/*
	Updates the `frameIndex` of the `Chroma` animation and sets the `duration` 
		(in seconds). The `color` is expected to be an array of the dimensions 
		for the `deviceType/device`. The `length` parameter is the size of the 
		`color` array. For `EChromaSDKDevice1DEnum` the array size should be `MAX 
		LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX ROW` 
		* `MAX COLUMN`. Returns the animation id upon success. Returns -1 upon 
		failure.
	*/
	static int LuaUpdateFrameName(lua::lua_State* state);
	/*
	When the idle animation flag is true, when no other animations are playing, 
		the idle animation will be used. The idle animation will not be affected 
		by the API calls to PluginIsPlaying, PluginStopAnimationType, PluginGetPlayingAnimationId, 
		and PluginGetPlayingAnimationCount. Then the idle animation flag is false, 
		the idle animation is disabled. `Device` uses `EChromaSDKDeviceEnum` enums.
	*/
	static int LuaUseIdleAnimation(lua::lua_State* state);
	/*
	Set idle animation flag for all devices.
	*/
	static int LuaUseIdleAnimations(lua::lua_State* state);
	/*
	Set preloading animation flag, which is set to true by default. Reference 
		animation by id.
	*/
	static int LuaUsePreloading(lua::lua_State* state);
	/*
	Set preloading animation flag, which is set to true by default. Reference 
		animation by name.
	*/
	static int LuaUsePreloadingName(lua::lua_State* state);
#pragma endregion
